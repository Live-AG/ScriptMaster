&НаКлиенте
Процедура РежимРедактора(Команда)

	РежимРедактированияВключен = Не РежимРедактированияВключен;
	ОтображениеЭлементовРежимаРедактировния();

	Если РежимРедактированияВключен Тогда

		Для Каждого ТекущаяСтрокаКоманды Из ДеревоКоманд.ПолучитьЭлементы() Цикл
			СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
			СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
			ТекстСкрипта = "";
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЭлементовРежимаРедактировния()

	Элементы.ФормаРежимРедактора.Пометка = РежимРедактированияВключен;

	Элементы.ФормаСохранитьДанные.Видимость = РежимРедактированияВключен;
	Элементы.ФормаЗагрузитьДанные.Видимость = РежимРедактированияВключен;

	Элементы.ТаблицаПараметровСписокЗначенийАргумента.Видимость = РежимРедактированияВключен;
	Элементы.ТаблицаПараметровТипАргумента.Видимость = РежимРедактированияВключен;

	Элементы.ДеревоКоманд.ИзменятьПорядокСтрок = РежимРедактированияВключен;
	Элементы.ДеревоКоманд.ИзменятьСоставСтрок	= РежимРедактированияВключен;

	Элементы.ТаблицаПараметров.ИзменятьПорядокСтрок = РежимРедактированияВключен;
	Элементы.ТаблицаПараметров.ИзменятьСоставСтрок = РежимРедактированияВключен;

	Элементы.ТаблицаПараметровКонтекстноеМенюГруппаРедактирования.Видимость = РежимРедактированияВключен;
	Элементы.ДеревоКомандКонтекстноеМенюГруппаРедактирование.Видимость = РежимРедактированияВключен;

	Элементы.ДеревоКомандИспользование.Видимость = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровИспользование.Видимость = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровАргумент.Видимость = Не РежимРедактированияВключен;

	Элементы.ГруппаСтриницыТерминала.Видимость = Не РежимРедактированияВключен;

	Элементы.ДеревоКомандКоманда.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ДеревоКомандОписание.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровПараметр.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровОписание.ТолькоПросмотр = Не РежимРедактированияВключен;

	Элементы.Программа.Доступность = Не РежимРедактированияВключен;
	Элементы.ВерсияПрограммы.Доступность = Не РежимРедактированияВключен;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОтображениеЭлементовРежимаРедактировния();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровСписокЗначенийАргументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтруктураПараметровФормы = Новый Структура;
	ТекущаяСтрокаКоманд = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд = Неопределено Тогда
		ДанныеСпискаВыбора = Новый СписокЗначений;
		ДанныеСпискаВыбора.ТипЗначения = ОписаниеТипаСтрока(50);
	Иначе
		ДанныеСпискаВыбора = ТекущаяСтрокаКоманд.СписокЗначенийАргумента;
	КонецЕсли;

	СтруктураПараметровФормы.Вставить("СписокЗначенийАргумента", ДанныеСпискаВыбора);

	ОткрытьФорму("ВнешняяОбработка.ПомощникСозданияСкриптов.Форма.ФормаЗаполненияСписка",
				 СтруктураПараметровФормы,
				 Элемент,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПутьКИсполняемомуФайлу = КаталогПрограммы();
	Программа = "ibcmd";

	УстановитьВерсииПрограммы();
	ПрочитатьПараметрыИзМакета();

КонецПроцедуры

&НаСервере
Процедура УстановитьВерсииПрограммы()
	;  
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	Макеты = ЭтаОбработка.Метаданные().Макеты;

	Элементы.ВерсияПрограммы.СписокВыбора.Очистить();
	ТекущаяВерсияПрограммы = "";
	Для Каждого МакетОбработки Из Макеты Цикл
		СоставСтрокиПрограммы = СтрРазделить(МакетОбработки.Синоним, " ");
		Если СоставСтрокиПрограммы[0] = Программа Тогда
			ТекущаяВерсияПрограммы = СоставСтрокиПрограммы[СоставСтрокиПрограммы.ВГраница()];
			Элементы.ВерсияПрограммы.СписокВыбора.Добавить(ТекущаяВерсияПрограммы);
		КонецЕсли;

	КонецЦикла;

	ВерсияПрограммы = ТекущаяВерсияПрограммы;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыИзМакета()

	ДеревоЗначенийКоманд		= РеквизитФормыВЗначение("ДеревоКоманд", Тип("ДеревоЗначений"));
	ТаблицаЗначенийПараметров	= РеквизитФормыВЗначение("ТаблицаПараметров", Тип("ТаблицаЗначений"));

	ДеревоЗначенийКоманд.Строки.Очистить();
	ТаблицаЗначенийПараметров.Очистить();

	ИмяМакета = "_" + Программа + "_" + СтрЗаменить(ВерсияПрограммы, ".", "_");

	ЭтаОбработка = РеквизитФормыВЗначение("Объект");

	Попытка
		МакетСтруктуры = ЭтаОбработка.ПолучитьМакет(ИмяМакета);
	Исключение

		Сообщить(ОписаниеОшибки());
		ЗначениеВРеквизитФормы(ДеревоЗначенийКоманд, "ДеревоКоманд");
		ЗначениеВРеквизитФормы(ТаблицаЗначенийПараметров, "ТаблицаПараметров");

		Возврат;
	КонецПопытки;

	СтрокаДанных = МакетСтруктуры.ПолучитьТекст();
	
	ЗагрузитьНастройкуНаСервере(СтрокаДанных);

	ТекстСкрипта = "";	
	
КонецПроцедуры

&НаСервере
Процедура ex_ПрочитатьПараметрыИзМакета()

	НачальнаяСтрока	= 5;
	КолонкаКоманды	= 1;
	//КолонкаПараметра	= 2;
	КолокнаОписания	= 4;

	ДеревоЗначенийКоманд			= РеквизитФормыВЗначение("ДеревоКоманд", Тип("ДеревоЗначений"));
	ТаблицаЗначенийПараметров	= РеквизитФормыВЗначение("ТаблицаПараметров", Тип("ТаблицаЗначений"));

	ДеревоЗначенийКоманд.Строки.Очистить();
	ТаблицаЗначенийПараметров.Очистить();

	ИмяМакета = "_" + Программа + "_" + СтрЗаменить(ВерсияПрограммы, ".", "_");

	ЭтаОбработка = РеквизитФормыВЗначение("Объект");

	Попытка
		МакетСтруктуры = ЭтаОбработка.ПолучитьМакет(ИмяМакета);
	Исключение

		Сообщить(ОписаниеОшибки());
		ЗначениеВРеквизитФормы(ДеревоЗначенийКоманд, "ДеревоКоманд");
		ЗначениеВРеквизитФормы(ТаблицаЗначенийПараметров, "ТаблицаПараметров");

		Возврат;
	КонецПопытки;

	Если МакетСтруктуры.Области.Количество() = 0 Тогда
		ЗначениеВРеквизитФормы(ДеревоЗначенийКоманд, "ДеревоКоманд");
		ЗначениеВРеквизитФормы(ТаблицаЗначенийПараметров, "ТаблицаПараметров");

		Возврат;
	КонецЕсли;

	ТаблицаОбластей = Новый ТаблицаЗначений;
	ТаблицаОбластей.Колонки.Добавить("ИмяОбласти", ОписаниеТипаСтрока(50));
	ТаблицаОбластей.Колонки.Добавить("Параметр", ОписаниеТипаСтрока(50));
	ТаблицаОбластей.Колонки.Добавить("НачалоДиапазонаСтрок", ОписаниеТипаЧисло(5));
	ТаблицаОбластей.Колонки.Добавить("КонецДиапазонаСтрок", ОписаниеТипаЧисло(5));
	ТаблицаОбластей.Колонки.Добавить("Описание", ОписаниеТипаСтрока(512));
	ТаблицаОбластей.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("УникальныйИдентификатор"));

	Для Каждого ОбластьМакета Из МакетСтруктуры.Области Цикл
		НачалоДиапазонаСтрок	= ОбластьМакета.Верх;
		КонецДиапазонаСтрок	= ОбластьМакета.Низ;

		СтрокаТаблицыОбластей = ТаблицаОбластей.Добавить();
		СтрокаТаблицыОбластей.НачалоДиапазонаСтрок	= НачалоДиапазонаСтрок;
		СтрокаТаблицыОбластей.КонецДиапазонаСтрок		= КонецДиапазонаСтрок;
		СтрокаТаблицыОбластей.ИмяОбласти				= ОбластьМакета.Имя;

		СтрокаТаблицыОбластей.Параметр	= СокрЛП(МакетСтруктуры.Область(НачалоДиапазонаСтрок,
																		  КолонкаКоманды,
																		  НачалоДиапазонаСтрок,
																		  КолонкаКоманды).Текст);

		СтрокаТаблицыОбластей.Описание = СокрЛП(МакетСтруктуры.Область(НачалоДиапазонаСтрок,
																	   КолокнаОписания,
																	   НачалоДиапазонаСтрок,
																	   КолокнаОписания).Текст);
		КлючСвязи	= Новый УникальныйИдентификатор;
		СтрокаТаблицыОбластей.КлючСвязи = КлючСвязи;

	КонецЦикла;

	ТаблицаОбластей.Сортировать("НачалоДиапазонаСтрок");

	Если ТаблицаОбластей.Количество() > 0 Тогда
		КонечнаяСтрока = ТаблицаОбластей[0].НачалоДиапазонаСтрок;
	Иначе
		КонечнаяСтрока = МакетСтруктуры.ВысотаТаблицы;
	КонецЕсли;

	КорневаяСтрока = ДеревоЗначенийКоманд.Строки.Добавить();
	КорневаяСтрока.Команда		= Программа;
	КорневаяСтрока.ИмяОбласти	= "_" + Программа;
	КлючСвязи	= Новый УникальныйИдентификатор;
	КорневаяСтрока.КлючСвязи = КлючСвязи;

	Для Каждого СтрокаОбластей Из ТаблицаОбластей Цикл
		СоздатьПодчиненныеЭлементы(КорневаяСтрока, СтрокаОбластей, ТаблицаОбластей, ДеревоЗначенийКоманд);
	КонецЦикла;

	ЗаполнитьТаблицуПараметров(ТаблицаЗначенийПараметров, ДеревоЗначенийКоманд, МакетСтруктуры);

	ЗначениеВРеквизитФормы(ДеревоЗначенийКоманд, "ДеревоКоманд");
	ЗначениеВРеквизитФормы(ТаблицаЗначенийПараметров, "ТаблицаПараметров");

	ТекстСкрипта = "";

КонецПроцедуры

&НаСервере
Процедура СоздатьПодчиненныеЭлементы(Знач СтрокаДерева, СтрокаОбластей, ТаблицаОбластей, ДеревоПараметров)

	НачалоДиапазонаСтрок	= СтрокаОбластей.НачалоДиапазонаСтрок;
	КонецДиапазонаСтрок	= СтрокаОбластей.КонецДиапазонаСтрок;

	НайденнаяСтрокаДерева = ДеревоПараметров.Строки.Найти(СтрокаОбластей.ИмяОбласти, "ИмяОбласти", Истина);

	Если ЗначениеЗаполнено(НайденнаяСтрокаДерева) Тогда
		Возврат;
	КонецЕсли;

	СтрокаДерева = СтрокаДерева.Строки.Добавить();
	СтрокаДерева.ИмяОбласти = СтрокаОбластей.ИмяОбласти;
	СтрокаДерева.Команда = СтрокаОбластей.Параметр;
	СтрокаДерева.Описание	= СтрокаОбластей.Описание;
	СтрокаДерева.КлючСвязи	= СтрокаОбластей.КлючСвязи;

	Для Каждого СтрокаПараметров Из ТаблицаОбластей Цикл

		Если СтрокаПараметров = СтрокаОбластей Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаПараметров.НачалоДиапазонаСтрок > НачалоДиапазонаСтрок
			 И СтрокаПараметров.КонецДиапазонаСтрок < КонецДиапазонаСтрок Тогда

			СоздатьПодчиненныеЭлементы(СтрокаДерева, СтрокаПараметров, ТаблицаОбластей, ДеревоПараметров);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПараметров(ТаблицаЗначенийПараметров, ДеревоЗначенийКоманд, МакетСтруктуры)

	КолонкаПараметра	= 2;
	КолокноОписания	= 4;

	СтрокиДереваКоманд = ДеревоЗначенийКоманд.Строки;

	Для Каждого СтрокаДерева Из СтрокиДереваКоманд Цикл

		ОбластьКоманд = МакетСтруктуры.ПолучитьОбласть(СтрокаДерева.ИмяОбласти);

		Для Каждого ПодчиненнаяКоманда Из СтрокаДерева.Строки Цикл
			ОбластьКоманд.УдалитьОбласть(ОбластьКоманд.Область(ПодчиненнаяКоманда.ИмяОбласти),
										 ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЦикла;

		Для НомерСтроки = 1 По ОбластьКоманд.ВысотаТаблицы Цикл
			Параметр	= СокрЛП(ОбластьКоманд.Область(НомерСтроки,
													   КолонкаПараметра,
													   НомерСтроки,
													   КолонкаПараметра).Текст);
			Описание	= СокрЛП(ОбластьКоманд.Область(НомерСтроки,
													   КолокноОписания,
													   НомерСтроки,
													   КолокноОписания).Текст);

			Если Не ЗначениеЗаполнено(Параметр) Тогда
				Продолжить;
			КонецЕсли;

			СтрокаПараметров = ТаблицаЗначенийПараметров.Добавить();

			СдвигСимвола = 1;
			НачалоАргумента = СтрНайти(Параметр, "<") + СдвигСимвола;
			КонецАргумента = СтрНайти(Параметр, ">");
			ИмяАргумента = Сред(Параметр, НачалоАргумента, КонецАргумента - НачалоАргумента);

			СтрокаПараметров.Параметр		= СокрЛП(Параметр);
			СтрокаПараметров.Описание		= СокрЛП(Описание);
			СтрокаПараметров.ИмяАргумента	= СокрЛП(ИмяАргумента);
			СтрокаПараметров.КлючСвязи		= СтрокаДерева.КлючСвязи;
		КонецЦикла;

		ЗаполнитьТаблицуПараметров(ТаблицаЗначенийПараметров, СтрокаДерева, МакетСтруктуры);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьВБуфер(Команда)

	СкопироватьВБуферОбмена();

КонецПроцедуры

&НаСервере
Процедура СкопироватьВБуферОбмена()

	ПолеHTMLБуфера = СтрШаблон("<!DOCTYPE html>
							   |<html>
							   |	<body onload='copy()'>
							   |		<input id='input' type='text'/>
							   |		<script>
							   |			function copy() {
							   |				var text = '%1';
							   |				var ua = navigator.userAgent;
							   |				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
							   |					window.clipboardData.setData('Text', text);
							   |				} else {
							   |					var copyText = document.getElementById('input');
							   |					copyText.value = text;
							   |					copyText.select();
							   |					document.execCommand('copy');
							   |				}
							   |			}
							   |		</script>
							   |	</body>
							   |</html>", СокрЛП(ТекстСкрипта));   
			
	//ПоказатьОповещениеПользователя("Скопировано в буфер");

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровИспользованиеПриИзменении(Элемент)

	ТекущаяСтрокаПараметров = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаПараметров.Использование Тогда
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		УстановитьОтметкуКоменды(ТекущаяСтрокаКоманд, Истина);
	КонецЕсли;

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандИспользованиеПриИзменении(Элемент)

	ТекущаяСтрокаКоманды = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманды.Использование Тогда
		УстановитьПометкуРодительскойКоманды(ТекущаяСтрокаКоманды);
		УстановитьПометкуОбязательныхПараметров(ТекущаяСтрокаКоманды.КлючСвязи);
	Иначе
		СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
		СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
	КонецЕсли;

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПриИзменении(Элемент)

	УстановитьВерсииПрограммы();
	ПрочитатьПараметрыИзМакета();
	РазвернутьУзлыДерева();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровАргументПриИзменении(Элемент)

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуПодчиненнойКоманды(Знач ТекущаяСтрокаКоманды)

	СтрокиПодчиненныхКоманд = ТекущаяСтрокаКоманды.ПолучитьЭлементы();
	Для Каждого ТекущаяСтрокаКоманды Из СтрокиПодчиненныхКоманд Цикл
		ТекущаяСтрокаКоманды.Использование = Ложь;
		СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
		СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРодительскойКоманды(ТекущаяСтрокаКоманды)

	РодительскаяСтрокаКоманды = ТекущаяСтрокаКоманды.ПолучитьРодителя();
	Если РодительскаяСтрокаКоманды <> Неопределено Тогда
		РодительскаяСтрокаКоманды.Использование = Истина;
		УстановитьПометкуРодительскойКоманды(РодительскаяСтрокаКоманды);
	КонецЕсли
	;

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуПараметровКоманды(КлючСвязи)

	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		СтрокаПараметра.Использование = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуОбязательныхПараметров(КлючСвязи)

	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		Если СтрНачинаетсяС(СтрокаПараметра.Параметр, "<") И СтрЗаканчиваетсяНа(СтрокаПараметра.Параметр, ">") Тогда
			СтрокаПараметра.Использование = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуКоменды(Знач СтрокаКоманд, Отметка)

	СтрокаКоманд.Использование = Отметка;
	СтрокаКоманд = СтрокаКоманд.ПолучитьРодителя();
	Если СтрокаКоманд <> Неопределено Тогда
		УстановитьОтметкуКоменды(СтрокаКоманд, Отметка);
	КонецЕсли
	;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКоммандПриАктивизацииСтроки(Элемент)

	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтборСтрок = Новый Структура("КлючСвязи", ТекущаяСтрокаКоманд.КлючСвязи);
	Элементы.ТаблицаПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуСкрипта()

	СтрокаСкрипта = "";
	СтрокиДереваКоманд = ДеревоКоманд.ПолучитьЭлементы();
	ЗаполнитьПараметрыКоманды(СтрокаСкрипта, СтрокиДереваКоманд);

	ТекстСкрипта = ПутьКИсполняемомуФайлу + СокрЛП(СтрокаСкрипта);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыКоманды(СтрокаСкрипта, СтрокиДереваКоманд)

	Для Каждого СтрокаКоманды Из СтрокиДереваКоманд Цикл

		Если Не СтрокаКоманды.Использование Тогда
			Продолжить;
		КонецЕсли;

		СтрокаСкрипта = СтрокаСкрипта + " " + СтрокаКоманды.Команда;

		СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаКоманды.КлючСвязи));

		Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
			Если Не СтрокаПараметра.Использование Тогда
				Продолжить;
			КонецЕсли;

			СтрокаСкрипта = СтрокаСкрипта + " " + ПолучитьСтрокуПараметра(СтрокаПараметра);
		КонецЦикла;

		ПодчиненныеСтроки = СтрокаКоманды.ПолучитьЭлементы();
		ЗаполнитьПараметрыКоманды(СтрокаСкрипта, ПодчиненныеСтроки);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуПараметра(СтруктураСтроки)

	МассивПараметорв = СтрРазделить(СокрЛП(СтруктураСтроки.Параметр), "|");
	Если ЗначениеЗаполнено(СтруктураСтроки.Аргумент) Тогда
		СтрокаПараметра = СтрЗаменить(СокрЛП(МассивПараметорв[0]), "<" + СтруктураСтроки.ИмяАргумента + ">", """"
																											 + СтруктураСтроки.Аргумент
																											 + """");
	Иначе
		СтрокаПараметра = СокрЛП(МассивПараметорв[0]);
	КонецЕсли;

	Возврат СтрокаПараметра;

КонецФункции

&НаКлиенте
Процедура ВерсияПлатформыПриИзменении(Элемент)

	ПрочитатьПараметрыИзМакета();

КонецПроцедуры

&НаСервере
Функция ВыгрузитьНастройкаНаСервере()

	СтруктураВыгрузки = Новый Структура;
	ДеревоКомандОбъект = РеквизитФормыВЗначение("ДеревоКоманд");
	ТаблицаПараметровОбъект = РеквизитФормыВЗначение("ТаблицаПараметров");

	СтруктураВыгрузки.Вставить("Программа", Программа);
	СтруктураВыгрузки.Вставить("ВерсияПрограммы", ВерсияПрограммы);
	СтруктураВыгрузки.Вставить("ДеревоКоманд", ДеревоКомандОбъект);
	СтруктураВыгрузки.Вставить("ТаблицаПараметров", ТаблицаПараметровОбъект);

	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", , Истина, Ложь);
	ЗаписьXML.УстановитьСтроку(ПараметрыЗаписиXML);

	СтруктураВXDTO = СериализаторXDTO.ЗаписатьXDTO(СтруктураВыгрузки);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СтруктураВXDTO);
	Результат = ЗаписьXML.Закрыть();
	
	//АдресХранилища = ПоместитьВоВременноеХранилище(Результат);

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкуНаСервере(СтрокаДанных)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаДанных);

	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);

	ПрочитанныеДанные = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();

	ЗначениеВРеквизитФормы(ПрочитанныеДанные.ДеревоКоманд, "ДеревоКоманд");
	ЗначениеВРеквизитФормы(ПрочитанныеДанные.ТаблицаПараметров, "ТаблицаПараметров");

	Программа = ПрочитанныеДанные.Программа;
	ВерсияПрограммы = ПрочитанныеДанные.ВерсияПрограммы;

КонецПроцедуры

&НаКлиенте
Асинх Процедура СохранитьДанные(Команда)

	Результат = ВыгрузитьНастройкаНаСервере();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Результат);

	ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайлов.Заголовок = "Выбор файла для сохранения";
	ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлов.Фильтр = "Файл XML|*.xml";
	ДиалогВыбораФайлов.ПолноеИмяФайла = "_" + Программа + "_" + СтрЗаменить(ВерсияПрограммы, ".", "_");

	Обещание = ДиалогВыбораФайлов.ВыбратьАсинх();
	ВыбранныйФайл = Ждать Обещание;
	Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда

		ТекстовыйДокумент.НачатьЗапись(Новый ОписаниеОповещения, ВыбранныйФайл[0], КодировкаТекста.UTF8);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьДанные(Команда)

	ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлов.Заголовок = "Выбор файла для сохранения";
	ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлов.Фильтр = "Файл XML|*.xml";

	Обещание = ДиалогВыбораФайлов.ВыбратьАсинх();
	ВыбранныйФайл = Ждать Обещание;
	Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		ТабличныйДокумент = Новый ТекстовыйДокумент;
		ТабличныйДокумент.Прочитать(ВыбранныйФайл[0]);
		СтрокаДанных = ТабличныйДокумент.ПолучитьТекст();
		ЗагрузитьНастройкуНаСервере(СтрокаДанных);
		РазвернутьУзлыДерева();
	КонецЕсли;

КонецПроцедуры


// Создает объект ОписаниеТипов, содержащий тип Строка.
//
// Параметры:
//  ДлинаСтроки - Число - длина строки.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Строка.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаСтрока(ДлинаСтроки)

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));

КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Число.
//
// Параметры:
//  Разрядность - Число - общее количество разрядов числа (количество разрядов
//                        целой части плюс количество разрядов дробной части).
//  РазрядностьДробнойЧасти - Число - число разрядов дробной части.
//  ЗнакЧисла - ДопустимыйЗнак - допустимый знак числа.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Число.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти = 0, Знач ЗнакЧисла = Неопределено)

	Если ЗнакЧисла = Неопределено Тогда
		ЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла));

КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Дата.
//
// Параметры:
//  ЧастиДаты - ЧастиДаты - набор вариантов использования значений типа Дата.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Дата.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаДата(ЧастиДаты)

	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));

КонецФункции

// Проверяет, содержит ли строка только символы латинского алфавита.
//
// Параметры:
//  СтрокаПроверки - Строка - проверяемая строка.
//  УчитыватьРазделителиСлов - Булево - учитывать ли разделители слов или они являются исключением.
//  ДопустимыеСимволы - Строка - дополнительные разрешенные символы, кроме латиницы.
//
// Возвращаемое значение:
//  Булево - Истина, если строка содержит только латинские (или допустимые) символы;
//           Ложь, если строка содержит иные символы.
//
Функция ТолькоЛатиницаВСтроке(Знач СтрокаПроверки, Знач УчитыватьРазделителиСлов = Истина, ДопустимыеСимволы = "")

	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;

	КодыДопустимыхСимволов = Новый Массив;

	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		КодыДопустимыхСимволов.Добавить(КодСимвола(Сред(ДопустимыеСимволы, Индекс, 1)));
	КонецЦикла;

	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		Если ((КодСимвола < 65) Или (КодСимвола > 90 И КодСимвола < 97) Или (КодСимвола > 122))
			 И (КодыДопустимыхСимволов.Найти(КодСимвола) = Неопределено) И Не (Не УчитыватьРазделителиСлов
																			   И ЭтоРазделительСлов(КодСимвола)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Асинх Процедура ДеревоКомандОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущаяСтрокаПараметра = Элементы.ДеревоКоманд.ТекущиеДанные;
	ОбещаниеСтроки = ВвестиСтрокуАсинх(ТекущаяСтрокаПараметра.Описание, , , Истина);
	ТекущаяСтрокаПараметра.Описание = Ждать ОбещаниеСтроки;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ТаблицаПараметровОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущаяСтрокаПараметра = Элементы.ТаблицаПараметров.ТекущиеДанные;
	ОбещаниеСтроки = ВвестиСтрокуАсинх(ТекущаяСтрокаПараметра.Описание, , , Истина);
	ТекущаяСтрокаПараметра.Описание = Ждать ОбещаниеСтроки;

КонецПроцедуры

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей. Если параметр не указан, то 
//                             разделителем считаются все символы, не являющиеся цифрами, 
//                             латинскими и кириллическими буквами, а также знаком подчеркивания.
//
// Возвращаемое значение:
//  Булево - Истина, если символ с кодом КодСимвола является разделителем.
//
&НаСервере
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт

	Если РазделителиСлов <> Неопределено Тогда
		Возврат СтрНайти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;

	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"

	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Асинх Процедура ТаблицаПараметровАргументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
//	Строка
//	Число
//	Булево
//	Дата
//	Список
//	Каталог
//	Файл
//	Пароль

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;

	Если ТекущиеДанные.ТипАргумента = "Число" Тогда

		ОбещаниеВыбора = ВвестиЧислоАсинх( , Элемент);
		Результат = Формат(Ждать ОбещаниеВыбора, "ЧГ=0;");

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("Истина", "true");
		СписокВыбораБулево.Добавить("Ложь", "false");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Дата" Тогда

		ОбещаниеВыбора = ВвестиДатуАсинх( , , ЧастиДаты.Дата);
		Результат = Ждать ОбещаниеВыбора;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Список" Тогда

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(ТекущиеДанные.СписокЗначенийАргумента, Элемент);
		Результат = Ждать ОбещаниеВыбора;

	КонецЕсли;

	ТекущиеДанные.Аргумент = Результат;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУзлыДерева()

	Узлы = ДеревоКоманд.ПолучитьЭлементы();
	Для Каждого Узел Из Узлы Цикл
		Элементы.ДеревоКоманд.Развернуть(Узел.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

КонецПроцедуры