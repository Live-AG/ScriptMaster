
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяПрограмма;

&НаКлиенте
Перем ТекущаяВерсияПрограммы;

&НаКлиенте
Перем Отступ;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Программа = "1cv8";

	УстановитьВерсииПрограммы();
	ПрочитатьПараметрыИзМакета();
	ДобавитьЭлементыФормыДляHTMLБуфера(ЭтотОбъект, Элементы);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПутьКИсполняемомуФайлу = ПолучитьПутьККаталогуПрограммы();
	
	ТекущаяПрограмма = Программа;
	ТекущаяВерсияПрограммы = ВерсияПрограммы;
	ОтображениеЭлементовРежимаРедактировния();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Не ЗавершениеРаботы Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		СохранениеПриЗакрытии();
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МестоИсполненияПриИзменении(Элемент)
	
	Если МестоИсполнения = 0 Тогда
		ПутьКИсполняемомуФайлу = ПолучитьПутьККаталогуПрограммы();
	Иначе
		УстановитьПутьНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ПрограммаПриИзменении(Элемент)

	Если Модифицированность Тогда
		ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
		Ответ = Ждать ОбещаниеОтвета;
		
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВыгрузитьСхемуВФайл(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Модифицированность = Ложь;
		
		Если Отказ Тогда
			Программа = 	ТекущаяПрограмма;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьВерсииПрограммы();
	ПрочитатьПараметрыИзМакета();
	РазвернутьУзлыДерева();
	ТекущаяПрограмма = Программа;

КонецПроцедуры

&НаКлиенте
Асинх Процедура СкопироватьПараметрыПриКопированииКоманды(КлючКопируемойСтроки, НовыйКлюч)
	
	ОжиданиеОтвета = ВопросАсинх("Скопировать параметры команды?", РежимДиалогаВопрос.ДаНет);
	Ответ = Ждать ОжиданиеОтвета;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СкопироватьПараметрыКоманды(КлючКопируемойСтроки, НовыйКлюч);
		УстановитьОтборПараметровКоманды(НовыйКлюч);
	КонецЕсли;  
	
КонецПроцедуры



&НаКлиенте
Процедура ДеревоКомандПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд <> Неопределено Тогда
		УдалитьПараметрыПриУдаленииКоманды(ТекущаяСтрокаКоманд);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьПараметрыПриУдаленииКоманды(ТекущаяСтрокаКоманд)
	
	ОжиданиеОтвета = ВопросАсинх("Удалить строку?", РежимДиалогаВопрос.ДаНет);
	Ответ = Ждать ОжиданиеОтвета;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьКоманду(ТекущаяСтрокаКоманд);
		
		СтрокиДерева = ?(ТекущаяСтрокаКоманд.ПолучитьРодителя() = Неопределено,
                                ДеревоКоманд.ПолучитьЭлементы(),
                                ТекущаяСтрокаКоманд.ПолучитьРодителя().ПолучитьЭлементы());
                                
      СтрокиДерева.Удалить(ТекущаяСтрокаКоманд);
	КонецЕсли;					
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьПараметры();

КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьПараметры()
	
	ВыделенныеСтроки = Элементы.ТаблицаПараметров.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = "Удалить строки?";
	Иначе	
		ТекстВопроса = "Удалить строку?";
	КонецЕсли;
		
	ОжиданиеОтвета = ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Ответ = Ждать ОжиданиеОтвета;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МассивСтрок = Новый Массив;
		Для Каждого УдаляемаяСтрока Из ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(ТаблицаПараметров.НайтиПоИдентификатору(УдаляемаяСтрока));                              
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивСтрок Цикл
	  		ТаблицаПараметров.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;					
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКоманду(СтрокаКоманды)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", СтрокаКоманды.КлючСвязи); 
	МассивСтрокКопирования = ТаблицаПараметров.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаДляУдаления Из МассивСтрокКопирования Цикл
		ТаблицаПараметров.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	Для Каждого ПодчиненныеСтрока Из СтрокаКоманды.ПолучитьЭлементы() Цикл
		УдалитьКоманду(ПодчиненныеСтрока);	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВерсияПлатформыПриИзменении(Элемент)

	Если РежимРедактированияВключен Тогда
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
		Ответ = Ждать ОбещаниеОтвета;
		
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВыгрузитьСхемуВФайл(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			ВерсияПрограммы = ТекущаяВерсияПрограммы;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ПрочитатьПараметрыИзМакета();
	ТекущаяВерсияПрограммы = ВерсияПрограммы;

КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКоманд

&НаКлиенте
Процедура ДеревоКомандПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Копирование Тогда

		Отказ = Истина;
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		
		Если ТекущаяСтрокаКоманд <> Неопределено Тогда
			
			РодительскийЭлементы = ТекущаяСтрокаКоманд.ПолучитьРодителя();
			
			Если РодительскийЭлементы = Неопределено Тогда
				НоваяСтрокаДерева = ДеревоКоманд.ПолучитьЭлементы().Добавить();
			Иначе
				НоваяСтрокаДерева = РодительскийЭлементы.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ТекущаяСтрокаКоманд);
			
			КлючКопируемойСтроки = ТекущаяСтрокаКоманд.КлючСвязи;
			НоваяСтрокаДерева.КлючСвязи = Новый УникальныйИдентификатор();
			СкопироватьПараметрыПриКопированииКоманды(КлючКопируемойСтроки, НоваяСтрокаДерева.КлючСвязи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандИспользованиеПриИзменении(Элемент)

	ТекущаяСтрокаКоманды = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманды.Использование Тогда
		УстановитьПометкуРодительскойКоманды(ТекущаяСтрокаКоманды);
		УстановитьПометкуОбязательныхПараметров(ТекущаяСтрокаКоманды.КлючСвязи);
	Иначе
		СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
		СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
	КонецЕсли;

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИсключительныеКоманды(ТекущаяСтрокаКоманды)
	
	РодительТекущегоУровня = ТекущаяСтрокаКоманды.ПолучитьРодителя();
	Если РодительТекущегоУровня = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	СтрокиТекущегоУровня = РодительТекущегоУровня.ПолучитьЭлементы();
	
	Если ТекущаяСтрокаКоманды.Исключительная Тогда
		
		Для Каждого СтрокаУровня Из СтрокиТекущегоУровня Цикл
			Если СтрокаУровня	= ТекущаяСтрокаКоманды Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаУровня.Исключительная Тогда
				СтрокаУровня.Использование = Ложь;
				СнятьПометкуПодчиненнойКоманды(СтрокаУровня);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКИсполняемомуФайлуПриИзменении(Элемент)
	
	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ДеревоКомандИспользование Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКоммандПриАктивизацииСтроки(Элемент)

	УстановитьОтборПараметровКоманды();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПараметровКоманды(КлючСвязи = Неопределено)
	
	Если КлючСвязи = Неопределено Тогда
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		Если ТекущаяСтрокаКоманд = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийКлючСвязи = ТекущаяСтрокаКоманд.КлючСвязи;
	Иначе
		ТекущийКлючСвязи = КлючСвязи;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("КлючСвязи", ТекущийКлючСвязи);
	Элементы.ТаблицаПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд <> Неопределено И НоваяСтрока И Не ЗначениеЗаполнено(ТекущаяСтрокаКоманд.КлючСвязи) Тогда
		ТекущаяСтрокаКоманд.КлючСвязи = Новый УникальныйИдентификатор();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	//@skip-check event-heandler-boolean-param
	Выполнение = РежимРедактированияВключен;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметров

&НаКлиенте
Процедура ТаблицаПараметровПараметрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;
	
	СдвигСимвола = 1;
	НачалоАргумента = СтрНайти(ТекущиеДанные.Параметр, "<") + СдвигСимвола;
	КонецАргумента = СтрНайти(ТекущиеДанные.Параметр, ">");
	Если НачалоАргумента > 0 И КонецАргумента > 0 Тогда
		ИмяАргумента = Сред(ТекущиеДанные.Параметр, НачалоАргумента, КонецАргумента - НачалоАргумента);
		ТекущиеДанные.ИмяАргумента = СокрЛП(ИмяАргумента);
	Иначе
		ТекущиеДанные.ИмяАргумента = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровСписокЗначенийАргументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтруктураПараметровФормы = Новый Структура;
	ТекущаяСтрокаКоманд = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд = Неопределено Тогда
		ДанныеСпискаВыбора = Новый СписокЗначений;
		ДанныеСпискаВыбора.ТипЗначения = ОписаниеТипаСтрока(50);
	Иначе
		ДанныеСпискаВыбора = ТекущаяСтрокаКоманд.СписокЗначенийАргумента;
	КонецЕсли;

	СписокВариантовПодбора = ПолучитьСписокВариантовПодбора();

	СтруктураПараметровФормы.Вставить("СписокЗначенийАргумента", ДанныеСпискаВыбора);
	СтруктураПараметровФормы.Вставить("СписокВариантовПодбора", СписокВариантовПодбора);

	Если ТекущаяСтрокаКоманд.ТипАргумента <> "Список" Тогда
		ПоказатьПредупреждение(, "Для заполнения списка выбора укажите тип аргумента ""Список""");
		Возврат;
	КонецЕсли; 

	ОткрытьФорму("ВнешняяОбработка.ПомощникСозданияСкриптов.Форма.ФормаЗаполненияСписка",
				 СтруктураПараметровФормы,
				 Элемент,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровТипАргументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ВыбранноеЗначение <> "Список" И ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.СписокЗначенийАргумента = Новый СписокЗначений();							
	КонецЕсли;		

КонецПроцедуры


&НаСервере
Функция ПолучитьСписокВариантовПодбора()
	
	ТаблицаПараметровЗначение = РеквизитФормыВЗначение("ТаблицаПараметров");
	СтрокиСоСписком = ТаблицаПараметровЗначение.НайтиСтроки(Новый Структура("ТипАргумента", "Список"));
	ТаблицаПараметровЗначение = ТаблицаПараметровЗначение.Скопировать(СтрокиСоСписком, "СписокЗначенийАргумента");
	МассивСписков = ТаблицаПараметровЗначение.ВыгрузитьКолонку("СписокЗначенийАргумента");
	
	СписокВариантовПодбора = Новый СписокЗначений();
	СписокВариантовПодбора.ЗагрузитьЗначения(МассивСписков);
	
	Возврат СписокВариантовПодбора;
	
КонецФункции


&НаКлиенте
Процедура ТаблицаПараметровИспользованиеПриИзменении(Элемент)

	ТекущаяСтрокаПараметров = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаПараметров.Использование Тогда
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		УстановитьОтметкуКоменды(ТекущаяСтрокаКоманд, Истина);
	КонецЕсли;

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТаблицаПараметровИспользование 
	  Или Элемент.ТекущийЭлемент = Элементы.ТаблицаПараметровАргумент Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровАргументПриИзменении(Элемент)

	ТекущаяСтрокаПараметров = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если Не ТекущаяСтрокаПараметров.Использование Тогда
		ТекущаяСтрокаПараметров.Использование = Истина;
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		УстановитьОтметкуКоменды(ТекущаяСтрокаКоманд, Истина);
	КонецЕсли;
	
	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	ТекущаяСтрокаПараметра = Элементы.ТаблицаПараметров.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрокаПараметра.КлючСвязи = ТекущаяСтрокаКоманд.КлючСвязи;
	КонецЕсли;
		
	Если ТекущаяСтрокаПараметра.ТипАргумента = "" 
		И СтрНайти(ТекущаяСтрокаПараметра.Параметр, "<") > 0 
		И СтрНайти(ТекущаяСтрокаПараметра.Параметр, ">") > 0 Тогда
			
		ТекущаяСтрокаПараметра.ТипАргумента = "Строка";		
	КонецЕсли;
	
	УстановитьОтборПараметровКоманды(ТекущаяСтрокаКоманд.КлючСвязи);

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РежимРедактора(Команда)

	РежимРедактированияВключен = Не РежимРедактированияВключен;
	ОтображениеЭлементовРежимаРедактировния();

	Если РежимРедактированияВключен Тогда

		Для Каждого ТекущаяСтрокаКоманды Из ДеревоКоманд.ПолучитьЭлементы() Цикл
			СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
			СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
			ТекстСкрипта = "";
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьВБуфер(Команда)

	//@skip-check wrong-string-literal-content
	СкопироватьВБуферОбмена(ТекстСкриптаПредставление, ЭтотОбъект["ПолеHTMLБуфера"]);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные(Команда)

	СохранитьВыгрузитьСхемуВФайл();	

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьДанные(Команда)

	ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлов.Заголовок = "Выбор файла для сохранения";
	ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлов.Фильтр = "Файл XML|*.xml";

	Обещание = ДиалогВыбораФайлов.ВыбратьАсинх();
	ВыбранныйФайл = Ждать Обещание;
	Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		//@skip-check type-not-defined
		ТабличныйДокумент = Новый ТекстовыйДокумент;
		ТабличныйДокумент.Прочитать(ВыбранныйФайл[0]);
		СтрокаДанных = ТабличныйДокумент.ПолучитьТекст();
		ЗагрузитьНастройкуНаСервере(СтрокаДанных);
		РазвернутьУзлыДерева();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПутьККаталогуПрограммы()
	
	#Если ВебКлиент Тогда
	Возврат "";
	#Иначе
	СисИнфо = Новый СистемнаяИнформация;
	
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		СимволыКовычек = """";
	Иначе
		СимволыКовычек = "";
	КонецЕсли;
		
	Возврат СимволыКовычек + КаталогПрограммы() + СимволыКовычек;
	#КонецЕсли
		

КонецФункции

&НаКлиенте
Асинх Процедура СохранениеПриЗакрытии()

	ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
	Ответ = Ждать ОбещаниеОтвета;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьВыгрузитьСхемуВФайл();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПутьНаСервере()
	
	ПутьКИсполняемомуФайлу = ПолучитьПутьККаталогуПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПараметрыКоманды(КлючКопируемойСтроки, НовыйКлюч)

	СтруктураПоиска = Новый Структура("КлючСвязи", КлючКопируемойСтроки); 
	МассивСтрокКопирования = ТаблицаПараметров.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаДляКопирования Из МассивСтрокКопирования Цикл
		НоваяСтрока = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляКопирования);
		НоваяСтрока.КлючСвязи = НовыйКлюч;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуферОбмена(Знач Значение, ПолеHTMLБуфера) Экспорт
	
	Сообщение = Значение;
	Значение = СтрЗаменить(Значение, "\", "\\");
	
	ПолеHTMLБуфера = СтрШаблон("<!DOCTYPE html>
							|<html>
							|	<body onload='copy()'>
							|		<input id='input' type='text'/>
							|		<script>
							|			function copy() {
							|				var text = '%1';
							|				var ua = navigator.userAgent;
							|				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
							|					window.clipboardData.setData('Text', text);
							|				} else {
							|					var copyText = document.getElementById('input');
							|					copyText.value = text;
							|					copyText.select();
							|					document.execCommand('copy');
							|				}
							|			}
							|		</script>
							|	</body>
							|</html>",
							Значение);   
	
	#Если Клиент Тогда
	ПоказатьОповещениеПользователя("Скопировано в буфер",, Сообщение, БиблиотекаКартинок.СкопироватьВБуфер);
	#КонецЕсли

КонецПроцедуры // СкопироватьВБуферОбмена()

&НаСервереБезКонтекста
Процедура ДобавитьЭлементыФормыДляHTMLБуфера(Объект, Элементы)
	
	ДобавляемыеРеквизиты	= Новый Массив;
	
	Реквизит_ПолеHTMLБуфера = Новый РеквизитФормы("ПолеHTMLБуфера", 
											Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки())
											,	
											, 
											"Поле буфера обмена");
	
	ДобавляемыеРеквизиты.Добавить(Реквизит_ПолеHTMLБуфера);
	
	Объект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	НовыйЭлементПолеHTML = Элементы.Добавить("ПолеHTMLБуфера", Тип("ПолеФормы"), Элементы.СтраницаБуфер);
	НовыйЭлементПолеHTML.Вид			= ВидПоляФормы.ПолеHTMLДокумента;
	НовыйЭлементПолеHTML.ПутьКДанным	= "ПолеHTMLБуфера";		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЭлементовРежимаРедактировния()

	Элементы.ФормаРежимРедактора.Пометка = РежимРедактированияВключен;

	Элементы.ФормаСохранитьДанные.Видимость = РежимРедактированияВключен;
	Элементы.ФормаЗагрузитьДанные.Видимость = РежимРедактированияВключен;

	Элементы.ТаблицаПараметровСписокЗначенийАргумента.Видимость = РежимРедактированияВключен;
	Элементы.ТаблицаПараметровТипАргумента.Видимость = РежимРедактированияВключен;
	
	Элементы.ДеревоКомандСсылкаНаИсточник.Видимость = РежимРедактированияВключен;

	Элементы.ДеревоКоманд.ИзменятьПорядокСтрок = РежимРедактированияВключен;
	Элементы.ДеревоКоманд.ИзменятьСоставСтрок	= РежимРедактированияВключен;

	Элементы.ТаблицаПараметров.ИзменятьПорядокСтрок = РежимРедактированияВключен;
	Элементы.ТаблицаПараметров.ИзменятьСоставСтрок = РежимРедактированияВключен;

	Элементы.ТаблицаПараметровКонтекстноеМенюГруппаРедактирования.Видимость = РежимРедактированияВключен;
	Элементы.ДеревоКомандКонтекстноеМенюГруппаРедактирование.Видимость = РежимРедактированияВключен;
	
	Элементы.ДеревоКомандИсключительная.Видимость = РежимРедактированияВключен;

	Элементы.ДеревоКомандИспользование.Видимость = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровИспользование.Видимость = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровАргумент.Видимость = Не РежимРедактированияВключен;

	Элементы.ГруппаСтриницыТерминала.Видимость = Не РежимРедактированияВключен;

	Элементы.ДеревоКомандКоманда.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ДеревоКомандОписание.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровПараметр.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровОписание.ТолькоПросмотр = Не РежимРедактированияВключен;

	Элементы.Программа.Доступность = Не РежимРедактированияВключен;
		
	Элементы.ВерсияПрограммы.РежимВыбораИзСписка = Не РежимРедактированияВключен;

КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИсточникНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрокаПараметра = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаПараметра <> Неопределено 
		И ЗначениеЗаполнено(ТекущаяСтрокаПараметра.СсылкаНаИсточник) Тогда 
			ЗапуститьПриложение(ТекущаяСтрокаПараметра.СсылкаНаИсточник);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВерсииПрограммы()
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	Макеты = ЭтаОбработка.Метаданные().Макеты;

	Элементы.ВерсияПрограммы.СписокВыбора.Очистить();
	ТекущаяВерсияПрограммы = "";
	Для Каждого МакетОбработки Из Макеты Цикл
		СоставСтрокиПрограммы = СтрРазделить(МакетОбработки.Синоним, " ");
		Если СоставСтрокиПрограммы[0] = Программа Тогда
			ТекущаяВерсияПрограммы = СоставСтрокиПрограммы[СоставСтрокиПрограммы.ВГраница()];
			Элементы.ВерсияПрограммы.СписокВыбора.Добавить(ТекущаяВерсияПрограммы);
		КонецЕсли;

	КонецЦикла;

	ВерсияПрограммы = ТекущаяВерсияПрограммы;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыИзМакета()

	ДеревоЗначенийКоманд		= РеквизитФормыВЗначение("ДеревоКоманд", Тип("ДеревоЗначений"));
	ТаблицаЗначенийПараметров	= РеквизитФормыВЗначение("ТаблицаПараметров", Тип("ТаблицаЗначений"));

	ДеревоЗначенийКоманд.Строки.Очистить();
	ТаблицаЗначенийПараметров.Очистить();

	ИмяМакета = "_" + Программа + "_" + СтрЗаменить(ВерсияПрограммы, ".", "_");

	ЭтаОбработка = РеквизитФормыВЗначение("Объект");

	Попытка
		МакетСтруктуры = ЭтаОбработка.ПолучитьМакет(ИмяМакета);
		СтрокаДанных = МакетСтруктуры.ПолучитьТекст();
		ЗагрузитьНастройкуНаСервере(СтрокаДанных);	
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
		ЗначениеВРеквизитФормы(ДеревоЗначенийКоманд, "ДеревоКоманд");
		ЗначениеВРеквизитФормы(ТаблицаЗначенийПараметров, "ТаблицаПараметров");
	КонецПопытки;

	ТекстСкрипта = "";	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(ТекстСообщения)
	
	СообщениеПользователю = Новый СообщениеПользователю();
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.Сообщить();		
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуПодчиненнойКоманды(Знач ТекущаяСтрокаКоманды)

	СтрокиПодчиненныхКоманд = ТекущаяСтрокаКоманды.ПолучитьЭлементы();
	Для Каждого ТекущаяСтрокаКоманды Из СтрокиПодчиненныхКоманд Цикл
		ТекущаяСтрокаКоманды.Использование = Ложь;
		СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
		СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРодительскойКоманды(ТекущаяСтрокаКоманды)

	РодительскаяСтрокаКоманды = ТекущаяСтрокаКоманды.ПолучитьРодителя();
	Если РодительскаяСтрокаКоманды <> Неопределено Тогда
		РодительскаяСтрокаКоманды.Использование = Истина;
		ОбработатьИсключительныеКоманды(ТекущаяСтрокаКоманды);
		УстановитьПометкуРодительскойКоманды(РодительскаяСтрокаКоманды);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуПараметровКоманды(КлючСвязи)

	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи, Использование", КлючСвязи, Истина));
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		СтрокаПараметра.Использование = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуОбязательныхПараметров(КлючСвязи)

	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи, Использование", КлючСвязи, Истина));
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		Если СтрНачинаетсяС(СтрокаПараметра.Параметр, "<") И СтрЗаканчиваетсяНа(СтрокаПараметра.Параметр, ">") Тогда
			СтрокаПараметра.Использование = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуКоменды(Знач СтрокаКоманд, Отметка)

	СтрокаКоманд.Использование = Отметка;
	ОбработатьИсключительныеКоманды(СтрокаКоманд);
	СтрокаКоманд = СтрокаКоманд.ПолучитьРодителя();
	Если СтрокаКоманд <> Неопределено Тогда
		УстановитьОтметкуКоменды(СтрокаКоманд, Отметка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуСкрипта()

	ЦветПути = WebЦвета.СеребристоСерый;
	МассивФорматированныхСтроки = Новый Массив;
	
	МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(ПутьКИсполняемомуФайлу, , ЦветПути));
	
	ТекстСкриптаПредставление = "";
	Отступ = "";
	СтрокиДереваКоманд = ДеревоКоманд.ПолучитьЭлементы();
	ЗаполнитьПараметрыКоманды(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтрокиДереваКоманд);
	
	ТекстСкрипта = Новый ФорматированнаяСтрока(МассивФорматированныхСтроки);
	ТекстСкриптаПредставление = ПутьКИсполняемомуФайлу + СокрЛП(ТекстСкриптаПредставление);
	ТекстСкриптаПредставление = СтрЗаменить(ТекстСкриптаПредставление, "  "," ");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыКоманды(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтрокиДереваКоманд)

	ЦветКоманды = WebЦвета.Малиновый;
	
	Для Каждого СтрокаКоманды Из СтрокиДереваКоманд Цикл

		Если Не СтрокаКоманды.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаКомандыТекст = ?(ЗначениеЗаполнено(СтрокаКоманды.Команда), Отступ, "") + СтрокаКоманды.Команда;
		
		МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(СтрокаКомандыТекст, , ЦветКоманды, , ));
		ТекстСкриптаПредставление = ТекстСкриптаПредставление + " " + СтрокаКоманды.Команда;
		Отступ = " ";
		
		СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаКоманды.КлючСвязи));

		Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
			Если Не СтрокаПараметра.Использование Тогда
				Продолжить;
			КонецЕсли;

			ЗаполнитьСтрокуПараметра(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтрокаПараметра);
		КонецЦикла;

		ПодчиненныеСтроки = СтрокаКоманды.ПолучитьЭлементы();
		ЗаполнитьПараметрыКоманды(МассивФорматированныхСтроки, ТекстСкриптаПредставление, ПодчиненныеСтроки);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуПараметра(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтруктураСтроки)

	ЦветПараметра = WebЦвета.СветлоГрифельноСерый;
	ЦветАргумента = WebЦвета.НебесноГолубой;

	МассивТиповВКовычках = Новый Массив;
	МассивТиповВКовычках.Добавить("Строка");
	МассивТиповВКовычках.Добавить("Файл");
	МассивТиповВКовычках.Добавить("Каталог");
	
	МассивПараметорв = СтрРазделить(СокрЛП(СтруктураСтроки.Параметр), "|");
	ПредставлениеПараметра = СокрЛП(МассивПараметорв[0]);
	Если МассивТиповВКовычках.Найти(СтруктураСтроки.ТипАргумента) = Неопределено Тогда
		ПредставлениеКовычки = "";		
	Иначе
		ПредставлениеКовычки = """";
	КонецЕсли;
	
	СтрокаПараметра = СтрЗаменить(ПредставлениеПараметра, "<" + СтруктураСтроки.ИмяАргумента + ">", "");	
	МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(" " + СтрокаПараметра, , ЦветПараметра));
	ТекстСкриптаПредставление = ТекстСкриптаПредставление + " " + СтрокаПараметра;
	
	Если ЗначениеЗаполнено(СтруктураСтроки.Аргумент) Тогда
		ПредставлениеАргумента = ПредставлениеКовычки + СтруктураСтроки.Аргумент + ПредставлениеКовычки;
	ИначеЕсли СтруктураСтроки.ИмяАргумента = "" Или СтрокаПараметра = ПредставлениеПараметра Тогда
		ПредставлениеАргумента = "";	
	Иначе
		ПредставлениеАргумента = "<" + СтруктураСтроки.ИмяАргумента + ">";
	КонецЕсли;
	
	МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеАргумента, , ЦветАргумента));
	ТекстСкриптаПредставление = ТекстСкриптаПредставление + ПредставлениеАргумента;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНастройкаНаСервере(ТекущаяПрограмма, ТекущаяВерсияПрограммы)

	СтруктураВыгрузки = Новый Структура;
	
	ДеревоКомандОбъект = РеквизитФормыВЗначение("ДеревоКоманд");
	ТаблицаПараметровОбъект = РеквизитФормыВЗначение("ТаблицаПараметров");

	ТаблицаПараметровОбъект.Колонки.Удалить(ТаблицаПараметровОбъект.Колонки.Аргумент);

	СтруктураВыгрузки.Вставить("Программа", ТекущаяПрограмма);
	СтруктураВыгрузки.Вставить("ВерсияПрограммы", ТекущаяВерсияПрограммы);
	СтруктураВыгрузки.Вставить("ДеревоКоманд", ДеревоКомандОбъект);
	СтруктураВыгрузки.Вставить("ТаблицаПараметров", ТаблицаПараметровОбъект);

	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", , Истина, Ложь);
	ЗаписьXML.УстановитьСтроку(ПараметрыЗаписиXML);

	СтруктураВXDTO = СериализаторXDTO.ЗаписатьXDTO(СтруктураВыгрузки);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СтруктураВXDTO);
	Результат = ЗаписьXML.Закрыть();
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкуНаСервере(СтрокаДанных)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаДанных);

	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);

	ПрочитанныеДанные = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ЗагружаемаяТаблиаПараметров = ПрочитанныеДанные.ТаблицаПараметров;
	ЗагружаемоеДеревоКоманд = ПрочитанныеДанные.ДеревоКоманд;
	
	Если ЗагружаемоеДеревоКоманд.Колонки.Найти("Исключительная") = Неопределено Тогда
		ЗагружаемоеДеревоКоманд.Колонки.Добавить("Исключительная", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ЗагружаемоеДеревоКоманд.Колонки.Найти("СсылкаНаИсточник") = Неопределено Тогда
		ЗагружаемоеДеревоКоманд.Колонки.Добавить("СсылкаНаИсточник", ОписаниеТипаСтрока(512));
	КонецЕсли;
	
	Если ЗагружаемаяТаблиаПараметров.Колонки.Найти("Аргумент") = Неопределено Тогда
		ЗагружаемаяТаблиаПараметров.Колонки.Добавить("Аргумент", ОписаниеТипаСтрока(512));
	КонецЕсли;

	ЗначениеВРеквизитФормы(ЗагружаемоеДеревоКоманд, "ДеревоКоманд");
	ЗначениеВРеквизитФормы(ЗагружаемаяТаблиаПараметров, "ТаблицаПараметров");

	Программа = ПрочитанныеДанные.Программа;
	ВерсияПрограммы = ПрочитанныеДанные.ВерсияПрограммы;

КонецПроцедуры



&НаКлиенте
Процедура ТаблицаПараметровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	//@skip-check event-heandler-boolean-param
	Выполнение = РежимРедактированияВключен;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") 
		И ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
			
		Возврат;
				
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число")
		И ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяСтрокаДерева = ДеревоКоманд.НайтиПоИдентификатору(Строка);
		СтрокиКопируемыхПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", 
																									ВыбраннаяСтрокаДерева.КлючСвязи));
		
		ВыбраннаяСтрокаДерева = ВыбраннаяСтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаИсточник = ДеревоКоманд.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
		ЗаполнитьЗначенияСвойств(ВыбраннаяСтрокаДерева, СтрокаИсточник);	
		ВыбраннаяСтрокаДерева.КлючСвязи = Новый УникальныйИдентификатор();
		
	Иначе
		ВыбраннаяСтрокаДерева = ДеревоКоманд.НайтиПоИдентификатору(Строка);
		СтрокиКопируемыхПараметров = ПараметрыПеретаскивания.Значение;
	КонецЕсли;
	
	НовыйКлюч = ВыбраннаяСтрокаДерева.КлючСвязи;
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда

		Для Каждого СтрокаДанных Из СтрокиКопируемыхПараметров Цикл
			НоваяСтрока = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.КлючСвязи = НовыйКлюч;				
		КонецЦикла;	
		
	ИначеЕсли ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		
		Для Каждого СтрокаДанных Из СтрокиКопируемыхПараметров Цикл
			СтрокаДанных.КлючСвязи = НовыйКлюч;				
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры


&НаКлиенте
Асинх Процедура СохранитьВыгрузитьСхемуВФайл(Отказ = Ложь)
	
	СтрокиТекущегоУровня = ДеревоКоманд.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровня Из СтрокиТекущегоУровня Цикл
		Если СтрокаУровня.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУровня.Использование = Ложь;
		СнятьПометкуПодчиненнойКоманды(СтрокаУровня);
	КонецЦикла;
	
	Результат = ВыгрузитьНастройкаНаСервере(ТекущаяПрограмма, ТекущаяВерсияПрограммы);
	//@skip-check type-not-defined
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Результат);

	ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайлов.Заголовок = "Выбор файла для сохранения";
	ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлов.Фильтр = "Файл XML|*.xml";
	ДиалогВыбораФайлов.ПолноеИмяФайла = "_" + ТекущаяПрограмма + "_" + СтрЗаменить(ТекущаяВерсияПрограммы, ".", "_");

	Обещание = ДиалогВыбораФайлов.ВыбратьАсинх();
	ВыбранныйФайл = Ждать Обещание;
	Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		ТекстовыйДокумент.НачатьЗапись(Новый ОписаниеОповещения, ВыбранныйФайл[0], КодировкаТекста.UTF8);
		Модифицированность = Ложь;
	Иначе
		Отказ = Истина;	
	КонецЕсли;	
	
КонецПроцедуры

// Создает объект ОписаниеТипов, содержащий тип Строка.
//
// Параметры:
//  ДлинаСтроки - Число - длина строки.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Строка.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаСтрока(ДлинаСтроки)

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));

КонецФункции

&НаКлиенте
Асинх Процедура ДеревоКомандОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	#Если Не ВебКлиент Тогда
		
	ТекущаяСтрокаПараметра = Элементы.ДеревоКоманд.ТекущиеДанные;
	ОбещаниеСтроки = ВвестиСтрокуАсинх(ТекущаяСтрокаПараметра.Описание, , , Истина); 
	Описание = Ждать ОбещаниеСтроки;
	Если Описание <> Неопределено Тогда
		ТекущаяСтрокаПараметра.Описание = Ждать ОбещаниеСтроки;
	КонецЕсли;
	
	#КонецЕсли
	

КонецПроцедуры

&НаКлиенте
Асинх Процедура ТаблицаПараметровОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	#Если Не ВебКлиент Тогда

	ТекущаяСтрокаПараметра = Элементы.ТаблицаПараметров.ТекущиеДанные;
	ОбещаниеСтроки = ВвестиСтрокуАсинх(ТекущаяСтрокаПараметра.Описание, , , Истина);
	Описание = Ждать ОбещаниеСтроки;
	Если Описание <> Неопределено Тогда
		ТекущаяСтрокаПараметра.Описание = Ждать ОбещаниеСтроки;
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Асинх Процедура ТаблицаПараметровАргументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	#Если Не ВебКлиент Тогда
	Результат = Неопределено;
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;

	Если ТекущиеДанные.ТипАргумента = "Число" Тогда

		ОбещаниеВыбора = ВвестиЧислоАсинх( , "Введите число", 9, 0);
		ВыбранноеЗначение = Ждать ОбещаниеВыбора;
		Если ВыбранноеЗначение <> Неопределено Тогда
			Результат = Формат(Ждать ВыбранноеЗначение, "ЧГ=0;");
		КонецЕсли;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("Истина", "true");
		СписокВыбораБулево.Добавить("Ложь", "false");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево (yes/no)" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("yes", "yes");
		СписокВыбораБулево.Добавить("no", "no");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево (on/off)" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("on", "on");
		СписокВыбораБулево.Добавить("off", "off");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево (allow/deny)" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("allow", "allow");
		СписокВыбораБулево.Добавить("deny", "deny");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Дата (yyyy-MM-dd)" Тогда

		ОбещаниеВыбора = ВвестиДатуАсинх( , "Введите дату", ЧастиДаты.Дата);
		Результат = Формат(Ждать ОбещаниеВыбора, "ДФ=yyyy-MM-dd;");
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Дата (yyyyMMdd)" Тогда

		ОбещаниеВыбора = ВвестиДатуАсинх( , "Введите дату", ЧастиДаты.Дата);
		Результат = Формат(Ждать ОбещаниеВыбора, "ДФ=yyyyMMdd;");

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Список" Тогда

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(ТекущиеДанные.СписокЗначенийАргумента, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Каталог" Тогда

		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайлов.Заголовок = "Выбор каталога";
		ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	
		ОбещаниеВыбора = ДиалогВыбораФайлов.ВыбратьАсинх();
		ВыбранныйФайл = Ждать ОбещаниеВыбора;
		Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
			Результат = ВыбранныйФайл[0];
		КонецЕсли;
	
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Файл" Тогда

		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайлов.Заголовок = "Выбор файла";
		ДиалогВыбораФайлов.МножественныйВыбор = Истина;
	
		ОбещаниеВыбора = ДиалогВыбораФайлов.ВыбратьАсинх();
		ВыбранныеФайлы = Ждать ОбещаниеВыбора;
		
		Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
			Результат = СтрСоединить(ВыбранныеФайлы, ",");	
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные.Аргумент = Результат;
		УстановитьСтрокуСкрипта();
	КонецЕсли;
	#КонецЕсли
	

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУзлыДерева()

	Узлы = ДеревоКоманд.ПолучитьЭлементы();
	Для Каждого Узел Из Узлы Цикл
		Элементы.ДеревоКоманд.Развернуть(Узел.ПолучитьИдентификатор());
	КонецЦикла;

КонецПроцедуры
#КонецОбласти


