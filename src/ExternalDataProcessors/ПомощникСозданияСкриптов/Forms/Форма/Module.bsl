
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяПрограмма;

&НаКлиенте
Перем ТекущаяВерсияПрограммы;

&НаКлиенте
Перем Отступ;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПутьКИсполняемомуФайлу = КаталогПрограммы();
	Программа = "ibcmd";

	УстановитьВерсииПрограммы();
	ПрочитатьПараметрыИзМакета();
	ДобавитьЭлементыФормыДляHTMLБуфера(ЭтотОбъект, Элементы);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ТекущаяПрограмма = Программа;
	ТекущаяВерсияПрограммы = ВерсияПрограммы;
	ОтображениеЭлементовРежимаРедактировния();

КонецПроцедуры

&НаКлиенте
Асинх Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Не ЗавершениеРаботы Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
		Ответ = Ждать ОбещаниеОтвета;
		
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВыгрузитьСхемуВФайл(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Асинх Процедура ПрограммаПриИзменении(Элемент)

	Если Модифицированность Тогда
		ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
		Ответ = Ждать ОбещаниеОтвета;
		
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВыгрузитьСхемуВФайл(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Программа = 	ТекущаяПрограмма;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	УстановитьВерсииПрограммы();
	ПрочитатьПараметрыИзМакета();
	РазвернутьУзлыДерева();
	ТекущаяПрограмма = Программа;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ВерсияПлатформыПриИзменении(Элемент)

	Если Модифицированность Тогда
		ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
		Ответ = Ждать ОбещаниеОтвета;
		
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВыгрузитьСхемуВФайл(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			ВерсияПрограммы = ТекущаяВерсияПрограммы;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ПрочитатьПараметрыИзМакета();
	ТекущаяВерсияПрограммы = ВерсияПрограммы;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКоманд

&НаКлиенте
Процедура ДеревоКомандИспользованиеПриИзменении(Элемент)

	ТекущаяСтрокаКоманды = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманды.Использование Тогда
		УстановитьПометкуРодительскойКоманды(ТекущаяСтрокаКоманды);
		УстановитьПометкуОбязательныхПараметров(ТекущаяСтрокаКоманды.КлючСвязи);
	Иначе
		СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
		СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
	КонецЕсли;

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ПутьКИсполняемомуФайлуПриИзменении(Элемент)
	
	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ДеревоКомандИспользование Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКоммандПриАктивизацииСтроки(Элемент)

	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтборСтрок = Новый Структура("КлючСвязи", ТекущаяСтрокаКоманд.КлючСвязи);
	Элементы.ТаблицаПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд = Неопределено И НоваяСтрока Тогда
		ТекущаяСтрокаКоманд.КлючСвязи = Новый УникальныйИдентификатор();
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметров

&НаКлиенте
Процедура ТаблицаПараметровПараметрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;
	
	СдвигСимвола = 1;
	НачалоАргумента = СтрНайти(ТекущиеДанные.Параметр, "<") + СдвигСимвола;
	КонецАргумента = СтрНайти(ТекущиеДанные.Параметр, ">");
	Если НачалоАргумента > 0 И КонецАргумента > 0 Тогда
		ИмяАргумента = Сред(ТекущиеДанные.Параметр, НачалоАргумента, КонецАргумента - НачалоАргумента);
		ТекущиеДанные.ИмяАргумента = СокрЛП(ИмяАргумента);
	Иначе
		ТекущиеДанные.ИмяАргумента = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровСписокЗначенийАргументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтруктураПараметровФормы = Новый Структура;
	ТекущаяСтрокаКоманд = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд = Неопределено Тогда
		ДанныеСпискаВыбора = Новый СписокЗначений;
		ДанныеСпискаВыбора.ТипЗначения = ОписаниеТипаСтрока(50);
	Иначе
		ДанныеСпискаВыбора = ТекущаяСтрокаКоманд.СписокЗначенийАргумента;
	КонецЕсли;

	СтруктураПараметровФормы.Вставить("СписокЗначенийАргумента", ДанныеСпискаВыбора);

	Если ТекущаяСтрокаКоманд.ТипАргумента <> "Список" Тогда
		ПоказатьПредупреждение(, "Для заполнения списка выбора укажите тип аргумента ""Список""");
		Возврат;
	КонецЕсли; 

	ОткрытьФорму("ВнешняяОбработка.ПомощникСозданияСкриптов.Форма.ФормаЗаполненияСписка",
				 СтруктураПараметровФормы,
				 Элемент,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровИспользованиеПриИзменении(Элемент)

	ТекущаяСтрокаПараметров = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаПараметров.Использование Тогда
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		УстановитьОтметкуКоменды(ТекущаяСтрокаКоманд, Истина);
	КонецЕсли;

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТаблицаПараметровИспользование 
	  Или Элемент.ТекущийЭлемент = Элементы.ТаблицаПараметровАргумент Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровАргументПриИзменении(Элемент)

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	ТекущаяСтрокаПараметра = Элементы.ТаблицаПараметров.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрокаПараметра.КлючСвязи = ТекущаяСтрокаКоманд.КлючСвязи;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РежимРедактора(Команда)

	РежимРедактированияВключен = Не РежимРедактированияВключен;
	ОтображениеЭлементовРежимаРедактировния();

	Если РежимРедактированияВключен Тогда

		Для Каждого ТекущаяСтрокаКоманды Из ДеревоКоманд.ПолучитьЭлементы() Цикл
			СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
			СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
			ТекстСкрипта = "";
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьВБуфер(Команда)

	СкопироватьВБуферОбмена(ТекстСкриптаПредставление, ЭтотОбъект["ПолеHTMLБуфера"]);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные(Команда)

	СохранитьВыгрузитьСхемуВФайл();	

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьДанные(Команда)

	ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайлов.Заголовок = "Выбор файла для сохранения";
	ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлов.Фильтр = "Файл XML|*.xml";

	Обещание = ДиалогВыбораФайлов.ВыбратьАсинх();
	ВыбранныйФайл = Ждать Обещание;
	Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		//@skip-check type-not-defined
		ТабличныйДокумент = Новый ТекстовыйДокумент;
		ТабличныйДокумент.Прочитать(ВыбранныйФайл[0]);
		СтрокаДанных = ТабличныйДокумент.ПолучитьТекст();
		ЗагрузитьНастройкуНаСервере(СтрокаДанных);
		РазвернутьУзлыДерева();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СкопироватьВБуферОбмена(Знач Значение, ПолеHTMLБуфера) Экспорт
	
	Сообщение = Значение;
	Значение = СтрЗаменить(Значение, "\", "\\");
	
	ПолеHTMLБуфера = СтрШаблон("<!DOCTYPE html>
							|<html>
							|	<body onload='copy()'>
							|		<input id='input' type='text'/>
							|		<script>
							|			function copy() {
							|				var text = '%1';
							|				var ua = navigator.userAgent;
							|				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
							|					window.clipboardData.setData('Text', text);
							|				} else {
							|					var copyText = document.getElementById('input');
							|					copyText.value = text;
							|					copyText.select();
							|					document.execCommand('copy');
							|				}
							|			}
							|		</script>
							|	</body>
							|</html>",
							Значение);   
	
	#Если Клиент Тогда
	ПоказатьОповещениеПользователя("Скопировано в буфер",, Сообщение, БиблиотекаКартинок.СкопироватьВБуфер);
	#КонецЕсли

КонецПроцедуры // СкопироватьВБуферОбмена()

&НаСервереБезКонтекста
Процедура ДобавитьЭлементыФормыДляHTMLБуфера(Объект, Элементы)
	
	ДобавляемыеРеквизиты	= Новый Массив;
	
	Реквизит_ПолеHTMLБуфера = Новый РеквизитФормы("ПолеHTMLБуфера", 
											Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки())
											,	
											, 
											"Поле буфера обмена");
	
	ДобавляемыеРеквизиты.Добавить(Реквизит_ПолеHTMLБуфера);
	
	Объект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	НовыйЭлементПолеHTML = Элементы.Добавить("ПолеHTMLБуфера", Тип("ПолеФормы"), Элементы.СтраницаБуфер);
	НовыйЭлементПолеHTML.Вид			= ВидПоляФормы.ПолеHTMLДокумента;
	НовыйЭлементПолеHTML.ПутьКДанным	= "ПолеHTMLБуфера";		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЭлементовРежимаРедактировния()

	Элементы.ФормаРежимРедактора.Пометка = РежимРедактированияВключен;

	Элементы.ФормаСохранитьДанные.Видимость = РежимРедактированияВключен;
	Элементы.ФормаЗагрузитьДанные.Видимость = РежимРедактированияВключен;

	Элементы.ТаблицаПараметровСписокЗначенийАргумента.Видимость = РежимРедактированияВключен;
	Элементы.ТаблицаПараметровТипАргумента.Видимость = РежимРедактированияВключен;

	Элементы.ДеревоКоманд.ИзменятьПорядокСтрок = РежимРедактированияВключен;
	Элементы.ДеревоКоманд.ИзменятьСоставСтрок	= РежимРедактированияВключен;

	Элементы.ТаблицаПараметров.ИзменятьПорядокСтрок = РежимРедактированияВключен;
	Элементы.ТаблицаПараметров.ИзменятьСоставСтрок = РежимРедактированияВключен;

	Элементы.ТаблицаПараметровКонтекстноеМенюГруппаРедактирования.Видимость = РежимРедактированияВключен;
	Элементы.ДеревоКомандКонтекстноеМенюГруппаРедактирование.Видимость = РежимРедактированияВключен;

	Элементы.ДеревоКомандИспользование.Видимость = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровИспользование.Видимость = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровАргумент.Видимость = Не РежимРедактированияВключен;

	Элементы.ГруппаСтриницыТерминала.Видимость = Не РежимРедактированияВключен;

	Элементы.ДеревоКомандКоманда.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ДеревоКомандОписание.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровПараметр.ТолькоПросмотр = Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровОписание.ТолькоПросмотр = Не РежимРедактированияВключен;

	Элементы.Программа.Доступность = Не РежимРедактированияВключен;
	Элементы.ВерсияПрограммы.Доступность = Не РежимРедактированияВключен;

КонецПроцедуры

&НаСервере
Процедура УстановитьВерсииПрограммы()
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	Макеты = ЭтаОбработка.Метаданные().Макеты;

	Элементы.ВерсияПрограммы.СписокВыбора.Очистить();
	ТекущаяВерсияПрограммы = "";
	Для Каждого МакетОбработки Из Макеты Цикл
		СоставСтрокиПрограммы = СтрРазделить(МакетОбработки.Синоним, " ");
		Если СоставСтрокиПрограммы[0] = Программа Тогда
			ТекущаяВерсияПрограммы = СоставСтрокиПрограммы[СоставСтрокиПрограммы.ВГраница()];
			Элементы.ВерсияПрограммы.СписокВыбора.Добавить(ТекущаяВерсияПрограммы);
		КонецЕсли;

	КонецЦикла;

	ВерсияПрограммы = ТекущаяВерсияПрограммы;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыИзМакета()

	ДеревоЗначенийКоманд		= РеквизитФормыВЗначение("ДеревоКоманд", Тип("ДеревоЗначений"));
	ТаблицаЗначенийПараметров	= РеквизитФормыВЗначение("ТаблицаПараметров", Тип("ТаблицаЗначений"));

	ДеревоЗначенийКоманд.Строки.Очистить();
	ТаблицаЗначенийПараметров.Очистить();

	ИмяМакета = "_" + Программа + "_" + СтрЗаменить(ВерсияПрограммы, ".", "_");

	ЭтаОбработка = РеквизитФормыВЗначение("Объект");

	Попытка
		МакетСтруктуры = ЭтаОбработка.ПолучитьМакет(ИмяМакета);
	Исключение

		Сообщить(ОписаниеОшибки());
		ЗначениеВРеквизитФормы(ДеревоЗначенийКоманд, "ДеревоКоманд");
		ЗначениеВРеквизитФормы(ТаблицаЗначенийПараметров, "ТаблицаПараметров");

		Возврат;
	КонецПопытки;

	СтрокаДанных = МакетСтруктуры.ПолучитьТекст();
	
	ЗагрузитьНастройкуНаСервере(СтрокаДанных);

	ТекстСкрипта = "";	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуПодчиненнойКоманды(Знач ТекущаяСтрокаКоманды)

	СтрокиПодчиненныхКоманд = ТекущаяСтрокаКоманды.ПолучитьЭлементы();
	Для Каждого ТекущаяСтрокаКоманды Из СтрокиПодчиненныхКоманд Цикл
		ТекущаяСтрокаКоманды.Использование = Ложь;
		СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
		СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРодительскойКоманды(ТекущаяСтрокаКоманды)

	РодительскаяСтрокаКоманды = ТекущаяСтрокаКоманды.ПолучитьРодителя();
	Если РодительскаяСтрокаКоманды <> Неопределено Тогда
		РодительскаяСтрокаКоманды.Использование = Истина;
		УстановитьПометкуРодительскойКоманды(РодительскаяСтрокаКоманды);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуПараметровКоманды(КлючСвязи)

	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		СтрокаПараметра.Использование = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуОбязательныхПараметров(КлючСвязи)

	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		Если СтрНачинаетсяС(СтрокаПараметра.Параметр, "<") И СтрЗаканчиваетсяНа(СтрокаПараметра.Параметр, ">") Тогда
			СтрокаПараметра.Использование = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуКоменды(Знач СтрокаКоманд, Отметка)

	СтрокаКоманд.Использование = Отметка;
	СтрокаКоманд = СтрокаКоманд.ПолучитьРодителя();
	Если СтрокаКоманд <> Неопределено Тогда
		УстановитьОтметкуКоменды(СтрокаКоманд, Отметка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуСкрипта()

	ЦветПути = WebЦвета.СеребристоСерый;
	МассивФорматированныхСтроки = Новый Массив;
	
	МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(ПутьКИсполняемомуФайлу, , ЦветПути));
	
	ТекстСкриптаПредставление = "";
	Отступ = "";
	СтрокиДереваКоманд = ДеревоКоманд.ПолучитьЭлементы();
	ЗаполнитьПараметрыКоманды(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтрокиДереваКоманд);
	
	ТекстСкрипта = Новый ФорматированнаяСтрока(МассивФорматированныхСтроки);
	ТекстСкриптаПредставление = ПутьКИсполняемомуФайлу + СокрЛП(ТекстСкриптаПредставление);
	ТекстСкриптаПредставление = СтрЗаменить(ТекстСкриптаПредставление, "  "," ");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыКоманды(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтрокиДереваКоманд)

	ЦветКоманды = WebЦвета.Малиновый;
	
	Для Каждого СтрокаКоманды Из СтрокиДереваКоманд Цикл

		Если Не СтрокаКоманды.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(Отступ + СтрокаКоманды.Команда, , ЦветКоманды, , ));
		ТекстСкриптаПредставление = ТекстСкриптаПредставление + " " + СтрокаКоманды.Команда;
		Отступ = " ";
		
		СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаКоманды.КлючСвязи));

		Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
			Если Не СтрокаПараметра.Использование Тогда
				Продолжить;
			КонецЕсли;

			ЗаполнитьСтрокуПараметра(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтрокаПараметра);
		КонецЦикла;

		ПодчиненныеСтроки = СтрокаКоманды.ПолучитьЭлементы();
		ЗаполнитьПараметрыКоманды(МассивФорматированныхСтроки, ТекстСкриптаПредставление, ПодчиненныеСтроки);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуПараметра(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтруктураСтроки)

	ЦветПараметра = WebЦвета.СветлоГрифельноСерый;
	ЦветАргумента = WebЦвета.НебесноГолубой;

	МассивТиповВКовычках = Новый Массив;
	МассивТиповВКовычках.Добавить("Строка");
	МассивТиповВКовычках.Добавить("Файл");
	МассивТиповВКовычках.Добавить("Каталог");
	
	МассивПараметорв = СтрРазделить(СокрЛП(СтруктураСтроки.Параметр), "|");
	ПредставлениеПараметра = СокрЛП(МассивПараметорв[0]);
	Если МассивТиповВКовычках.Найти(СтруктураСтроки.ТипАргумента) = Неопределено Тогда
		ПредставлениеКовычки = "";		
	Иначе
		ПредставлениеКовычки = """";
	КонецЕсли;
	
	СтрокаПараметра = СтрЗаменить(ПредставлениеПараметра, "<" + СтруктураСтроки.ИмяАргумента + ">", "");	
	МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(" " + СтрокаПараметра, , ЦветПараметра));
	ТекстСкриптаПредставление = ТекстСкриптаПредставление + " " + СтрокаПараметра;
	
	Если ЗначениеЗаполнено(СтруктураСтроки.Аргумент) Тогда
		ПредставлениеАргумента = ПредставлениеКовычки + СтруктураСтроки.Аргумент + ПредставлениеКовычки;
	ИначеЕсли СтруктураСтроки.ИмяАргумента = "" Или СтрокаПараметра = ПредставлениеПараметра Тогда
		ПредставлениеАргумента = "";	
	Иначе
		ПредставлениеАргумента = "<" + СтруктураСтроки.ИмяАргумента + ">";
	КонецЕсли;
	
	МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеАргумента, , ЦветАргумента));
	ТекстСкриптаПредставление = ТекстСкриптаПредставление + ПредставлениеАргумента;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНастройкаНаСервере()

	СтруктураВыгрузки = Новый Структура;
	ДеревоКомандОбъект = РеквизитФормыВЗначение("ДеревоКоманд");
	ТаблицаПараметровОбъект = РеквизитФормыВЗначение("ТаблицаПараметров");

	СтруктураВыгрузки.Вставить("Программа", Программа);
	СтруктураВыгрузки.Вставить("ВерсияПрограммы", ВерсияПрограммы);
	СтруктураВыгрузки.Вставить("ДеревоКоманд", ДеревоКомандОбъект);
	СтруктураВыгрузки.Вставить("ТаблицаПараметров", ТаблицаПараметровОбъект);

	ЗаписьXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", , Истина, Ложь);
	ЗаписьXML.УстановитьСтроку(ПараметрыЗаписиXML);

	СтруктураВXDTO = СериализаторXDTO.ЗаписатьXDTO(СтруктураВыгрузки);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СтруктураВXDTO);
	Результат = ЗаписьXML.Закрыть();
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкуНаСервере(СтрокаДанных)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаДанных);

	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);

	ПрочитанныеДанные = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();

	ЗначениеВРеквизитФормы(ПрочитанныеДанные.ДеревоКоманд, "ДеревоКоманд");
	ЗначениеВРеквизитФормы(ПрочитанныеДанные.ТаблицаПараметров, "ТаблицаПараметров");

	Программа = ПрочитанныеДанные.Программа;
	ВерсияПрограммы = ПрочитанныеДанные.ВерсияПрограммы;

КонецПроцедуры

&НаКлиенте
Асинх Процедура СохранитьВыгрузитьСхемуВФайл(Отказ = Ложь)
	
	Результат = ВыгрузитьНастройкаНаСервере();
	//@skip-check type-not-defined
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Результат);

	ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайлов.Заголовок = "Выбор файла для сохранения";
	ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлов.Фильтр = "Файл XML|*.xml";
	ДиалогВыбораФайлов.ПолноеИмяФайла = "_" + Программа + "_" + СтрЗаменить(ВерсияПрограммы, ".", "_");

	Обещание = ДиалогВыбораФайлов.ВыбратьАсинх();
	ВыбранныйФайл = Ждать Обещание;
	Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		ТекстовыйДокумент.НачатьЗапись(Новый ОписаниеОповещения, ВыбранныйФайл[0], КодировкаТекста.UTF8);
	Иначе
		Отказ = Истина;	
	КонецЕсли;	
	
КонецПроцедуры

// Создает объект ОписаниеТипов, содержащий тип Строка.
//
// Параметры:
//  ДлинаСтроки - Число - длина строки.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Строка.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаСтрока(ДлинаСтроки)

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));

КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Число.
//
// Параметры:
//  Разрядность - Число - общее количество разрядов числа (количество разрядов
//                        целой части плюс количество разрядов дробной части).
//  РазрядностьДробнойЧасти - Число - число разрядов дробной части.
//  ЗнакЧисла - ДопустимыйЗнак - допустимый знак числа.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Число.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти = 0, Знач ЗнакЧисла = Неопределено)

	Если ЗнакЧисла = Неопределено Тогда
		ЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла));

КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Дата.
//
// Параметры:
//  ЧастиДаты - ЧастиДаты - набор вариантов использования значений типа Дата.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Дата.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаДата(ЧастиДаты)

	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));

КонецФункции

// Проверяет, содержит ли строка только символы латинского алфавита.
//
// Параметры:
//  СтрокаПроверки - Строка - проверяемая строка.
//  УчитыватьРазделителиСлов - Булево - учитывать ли разделители слов или они являются исключением.
//  ДопустимыеСимволы - Строка - дополнительные разрешенные символы, кроме латиницы.
//
// Возвращаемое значение:
//  Булево - Истина, если строка содержит только латинские (или допустимые) символы;
//           Ложь, если строка содержит иные символы.
//
Функция ТолькоЛатиницаВСтроке(Знач СтрокаПроверки, Знач УчитыватьРазделителиСлов = Истина, ДопустимыеСимволы = "")

	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;

	КодыДопустимыхСимволов = Новый Массив;

	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		КодыДопустимыхСимволов.Добавить(КодСимвола(Сред(ДопустимыеСимволы, Индекс, 1)));
	КонецЦикла;

	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		Если ((КодСимвола < 65) Или (КодСимвола > 90 И КодСимвола < 97) Или (КодСимвола > 122))
			 И (КодыДопустимыхСимволов.Найти(КодСимвола) = Неопределено) И Не (Не УчитыватьРазделителиСлов
																			   И ЭтоРазделительСлов(КодСимвола)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Асинх Процедура ДеревоКомандОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущаяСтрокаПараметра = Элементы.ДеревоКоманд.ТекущиеДанные;
	ОбещаниеСтроки = ВвестиСтрокуАсинх(ТекущаяСтрокаПараметра.Описание, , , Истина); 
	Описание = Ждать ОбещаниеСтроки;
	Если Описание <> Неопределено Тогда
		ТекущаяСтрокаПараметра.Описание = Ждать ОбещаниеСтроки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ТаблицаПараметровОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущаяСтрокаПараметра = Элементы.ТаблицаПараметров.ТекущиеДанные;
	ОбещаниеСтроки = ВвестиСтрокуАсинх(ТекущаяСтрокаПараметра.Описание, , , Истина);
	Описание = Ждать ОбещаниеСтроки;
	Если Описание <> Неопределено Тогда
		ТекущаяСтрокаПараметра.Описание = Ждать ОбещаниеСтроки;
	КонецЕсли;

КонецПроцедуры

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей. Если параметр не указан, то 
//                             разделителем считаются все символы, не являющиеся цифрами, 
//                             латинскими и кириллическими буквами, а также знаком подчеркивания.
//
// Возвращаемое значение:
//  Булево - Истина, если символ с кодом КодСимвола является разделителем.
//
&НаСервере
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено)

	Если РазделителиСлов <> Неопределено Тогда
		Возврат СтрНайти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;

	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"

	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;

КонецФункции

&НаКлиенте
Асинх Процедура ТаблицаПараметровАргументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
//	Строка
//	Число
//	Булево
//	Дата
//	Список
//	Каталог
//	Файл
//	Пароль

	СтандартнаяОбработка = Ложь;
	Результат = Неопределено;
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;

	Если ТекущиеДанные.ТипАргумента = "Число" Тогда

		ОбещаниеВыбора = ВвестиЧислоАсинх( , "Введите число", 9, 0);
		ВыбранноеЗначение = Ждать ОбещаниеВыбора;
		Если ВыбранноеЗначение <> Неопределено Тогда
			Результат = Формат(Ждать ВыбранноеЗначение, "ЧГ=0;");
		КонецЕсли;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("Истина", "true");
		СписокВыбораБулево.Добавить("Ложь", "false");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Дата" Тогда

		ОбещаниеВыбора = ВвестиДатуАсинх( , "Введите дату", ЧастиДаты.Дата);
		Результат = Ждать ОбещаниеВыбора;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Список" Тогда

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(ТекущиеДанные.СписокЗначенийАргумента, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Каталог" Тогда

		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайлов.Заголовок = "Выбор каталога";
		ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	
		ОбещаниеВыбора = ДиалогВыбораФайлов.ВыбратьАсинх();
		ВыбранныйФайл = Ждать ОбещаниеВыбора;
		Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
			Результат = ВыбранныйФайл[0];
		КонецЕсли;
	
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Файл" Тогда

		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайлов.Заголовок = "Выбор файла";
		ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	
		ОбещаниеВыбора = ДиалогВыбораФайлов.ВыбратьАсинх();
		ВыбранныйФайл = Ждать ОбещаниеВыбора;
		Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
			Результат = ВыбранныйФайл[0];
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные.Аргумент = Результат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУзлыДерева()

	Узлы = ДеревоКоманд.ПолучитьЭлементы();
	Для Каждого Узел Из Узлы Цикл
		Элементы.ДеревоКоманд.Развернуть(Узел.ПолучитьИдентификатор(), Истина);
	КонецЦикла;

КонецПроцедуры
#КонецОбласти


