

#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяУтилита;

&НаКлиенте
Перем ТекущаяВерсияУтилиты;

&НаКлиенте
Перем Отступ;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ИмяУтилиты = "1cv8";

	УстановитьВерсииПрограммы();
	ПрочитатьПараметрыИзМакета();
	ДобавитьЭлементыФормыДляHTMLБуфера(ЭтотОбъект, Элементы);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПутьКИсполняемомуФайлу = ПолучитьПутьККаталогуПрограммы();
	
	ТекущаяУтилита = ИмяУтилиты;
	ТекущаяВерсияУтилиты = ВерсияУтилиты;
	ОтображениеЭлементовРежимаРедактировния();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Не ЗавершениеРаботы Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		СохранениеПриЗакрытии();
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы


&НаКлиенте
Асинх Процедура УтилитаПриИзменении(Элемент)

	Если Модифицированность Тогда
		ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
		Ответ = Ждать ОбещаниеОтвета;
		
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВыгрузитьСхемуВФайл(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Модифицированность = Ложь;
		
		Если Отказ Тогда
			ИмяУтилиты = ТекущаяУтилита;
			Возврат;
		КонецЕсли;
	КонецЕсли;	

	ПриИзмененииУтилиты();

КонецПроцедуры

&НаКлиенте
Асинх Процедура ВерсияУтилитыПриИзменении(Элемент)

	Если РежимРедактированияВключен Тогда
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
		Ответ = Ждать ОбещаниеОтвета;
		
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьВыгрузитьСхемуВФайл(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			ВерсияУтилиты = ТекущаяВерсияУтилиты;
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ПрочитатьПараметрыИзМакета();
	ТекущаяВерсияУтилиты = ВерсияУтилиты;

КонецПроцедуры

&НаКлиенте
Процедура ТекстСкриптаПредставлениеПриИзменении(Элемент)

	РазобратьСтрокуСкрипта();
	
	СтруктураТекстаСкрипта = ПолучитьТекстИПердставлениеСкрипта();
	
	Если ЗначениеЗаполнено(СтруктураТекстаСкрипта)
		И СокрЛП(ТекстСкриптаПредставление) = СокрЛП(СтруктураТекстаСкрипта.ТекстСкрипта) Тогда
		УстановитьСтрокуСкрипта();
		ЗаписатьСтрокуВИсторию();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекстСкриптаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаСтриницыТерминала.ТекущаяСтраница = Элементы.СтраницаТекста;

КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаИсточникНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрокаПараметра = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаПараметра <> Неопределено 
		И ЗначениеЗаполнено(ТекущаяСтрокаПараметра.СсылкаНаИсточник) Тогда 
			ЗапуститьПриложение(ТекущаяСтрокаПараметра.СсылкаНаИсточник);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПутьКИсполняемомуФайлуПриИзменении(Элемент)
	
	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура МестоИсполненияПриИзменении(Элемент)
	
	Если МестоИсполнения = 0 Тогда
		ПутьКИсполняемомуФайлу = ПолучитьПутьККаталогуПрограммы();
	Иначе
		УстановитьПутьНаСервере();
	КонецЕсли;
	
	ОбработатьУстановкуАргумента();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПредставлениеПустогоЗначенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;
	ЗаполнитьПредставлениеПараметра(ТекущиеДанные, РазделительПараметраИАргумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПредсталвлениеПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;
	ТекущиеДанные.Параметр = "";
	ТекущиеДанные.ПредставлениеПустогоЗначения = СтрокаБезГраничныхСимволов(ТекущиеДанные.ПредставлениеПустогоЗначения, "<", ">"); 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКоманд


&НаКлиенте
Процедура ДеревоКомандПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

#Если Не МобильноеПриложениеКлиент Тогда
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") 
		И ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
			
		Возврат;
				
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число")
		И ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяСтрокаДерева = ДеревоКоманд.НайтиПоИдентификатору(Строка);
		СтрокиКопируемыхПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", 
																									ВыбраннаяСтрокаДерева.КлючСвязи));
		
		ВыбраннаяСтрокаДерева = ВыбраннаяСтрокаДерева.ПолучитьЭлементы().Добавить();
		СтрокаИсточник = ДеревоКоманд.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
		ЗаполнитьЗначенияСвойств(ВыбраннаяСтрокаДерева, СтрокаИсточник);	
		ВыбраннаяСтрокаДерева.КлючСвязи = Новый УникальныйИдентификатор();
		
	Иначе
		ВыбраннаяСтрокаДерева = ДеревоКоманд.НайтиПоИдентификатору(Строка);
		СтрокиКопируемыхПараметров = ПараметрыПеретаскивания.Значение;
	КонецЕсли;
	
	НовыйКлюч = ВыбраннаяСтрокаДерева.КлючСвязи;
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда

		Для Каждого СтрокаДанных Из СтрокиКопируемыхПараметров Цикл
			НоваяСтрока = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
			НоваяСтрока.КлючСвязи = НовыйКлюч;				
		КонецЦикла;	
		
	ИначеЕсли ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		
		Для Каждого СтрокаДанных Из СтрокиКопируемыхПараметров Цикл
			СтрокаДанных.КлючСвязи = НовыйКлюч;				
		КонецЦикла;
	КонецЕсли;
	
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Асинх Процедура ДеревоКомандОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	#Если Не ВебКлиент Тогда
		
	ТекущаяСтрокаПараметра = Элементы.ДеревоКоманд.ТекущиеДанные;
	ОбещаниеСтроки = ВвестиСтрокуАсинх(ТекущаяСтрокаПараметра.Описание, , , Истина); 
	Описание = Ждать ОбещаниеСтроки;
	Если Описание <> Неопределено Тогда
		ТекущаяСтрокаПараметра.Описание = Ждать ОбещаниеСтроки;
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд <> Неопределено Тогда
		УдалитьПараметрыПриУдаленииКоманды(ТекущаяСтрокаКоманд);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Копирование Тогда

		Отказ = Истина;
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		
		Если ТекущаяСтрокаКоманд <> Неопределено Тогда
			
			РодительскийЭлементы = ТекущаяСтрокаКоманд.ПолучитьРодителя();
			
			Если РодительскийЭлементы = Неопределено Тогда
				НоваяСтрокаДерева = ДеревоКоманд.ПолучитьЭлементы().Добавить();
			Иначе
				НоваяСтрокаДерева = РодительскийЭлементы.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, ТекущаяСтрокаКоманд);
			
			КлючКопируемойСтроки = ТекущаяСтрокаКоманд.КлючСвязи;
			НоваяСтрокаДерева.КлючСвязи = Новый УникальныйИдентификатор();
			СкопироватьПараметрыПриКопированииКоманды(КлючКопируемойСтроки, НоваяСтрокаДерева.КлючСвязи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандИспользованиеПриИзменении(Элемент)

	ТекущаяСтрокаКоманды = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманды.Использование Тогда
		УстановитьПометкуРодительскойКоманды(ТекущаяСтрокаКоманды);
		УстановитьПометкуОбязательныхПараметров(ТекущаяСтрокаКоманды.КлючСвязи);
	Иначе
		СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
		СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
	КонецЕсли;

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ДеревоКомандИспользование Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКоммандПриАктивизацииСтроки(Элемент)

	УстановитьОтборПараметровКоманды();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд <> Неопределено И НоваяСтрока И Не ЗначениеЗаполнено(ТекущаяСтрокаКоманд.КлючСвязи) Тогда
		ТекущаяСтрокаКоманд.КлючСвязи = Новый УникальныйИдентификатор();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКомандНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	//@skip-check event-heandler-boolean-param
	Выполнение = РежимРедактированияВключен;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПараметров

&НаКлиенте
Процедура ТекстСкриптаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьСтрокуСкрипта();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьПараметры();

КонецПроцедуры

&НаКлиенте
Асинх Процедура ТаблицаПараметровОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	#Если Не ВебКлиент Тогда

	ТекущаяСтрокаПараметра = Элементы.ТаблицаПараметров.ТекущиеДанные;
	ОбещаниеСтроки = ВвестиСтрокуАсинх(ТекущаяСтрокаПараметра.Описание, , , Истина);
	Описание = Ждать ОбещаниеСтроки;
	Если Описание <> Неопределено Тогда
		ТекущаяСтрокаПараметра.Описание = Ждать ОбещаниеСтроки;
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Асинх Процедура ТаблицаПараметровАргументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	#Если Не ВебКлиент Тогда
	Результат = Неопределено;
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;

	Если ТекущиеДанные.ТипАргумента = "Число" Тогда

		ОбещаниеВыбора = ВвестиЧислоАсинх( , "Введите число", 9, 0);
		ВыбранноеЗначение = Ждать ОбещаниеВыбора;
		Если ВыбранноеЗначение <> Неопределено Тогда
			Результат = Формат(Ждать ВыбранноеЗначение, "ЧГ=0;");
		КонецЕсли;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("Истина", "true");
		СписокВыбораБулево.Добавить("Ложь", "false");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево (yes/no)" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("yes", "yes");
		СписокВыбораБулево.Добавить("no", "no");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево (on/off)" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("on", "on");
		СписокВыбораБулево.Добавить("off", "off");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Булево (allow/deny)" Тогда

		СписокВыбораБулево = Новый СписокЗначений;
		СписокВыбораБулево.Добавить("allow", "allow");
		СписокВыбораБулево.Добавить("deny", "deny");

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(СписокВыбораБулево, Элемент);
		Результат = Ждать ОбещаниеВыбора;

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Дата (yyyy-MM-dd)" Тогда

		ОбещаниеВыбора = ВвестиДатуАсинх( , "Введите дату", ЧастиДаты.Дата);
		Результат = Формат(Ждать ОбещаниеВыбора, "ДФ=yyyy-MM-dd;");
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Дата (yyyyMMdd)" Тогда

		ОбещаниеВыбора = ВвестиДатуАсинх( , "Введите дату", ЧастиДаты.Дата);
		Результат = Формат(Ждать ОбещаниеВыбора, "ДФ=yyyyMMdd;");

	ИначеЕсли ТекущиеДанные.ТипАргумента = "Список" Тогда

		ОбещаниеВыбора = ВыбратьИзСпискаАсинх(ТекущиеДанные.СписокЗначенийАргумента, Элемент);
		Результат = Ждать ОбещаниеВыбора;
		
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Каталог" Тогда

		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайлов.Заголовок = "Выбор каталога";
		ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	
		ОбещаниеВыбора = ДиалогВыбораФайлов.ВыбратьАсинх();
		ВыбранныйФайл = Ждать ОбещаниеВыбора;
		Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
			Результат = ВыбранныйФайл[0];
		КонецЕсли;
	
	ИначеЕсли ТекущиеДанные.ТипАргумента = "Файл" Тогда

		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайлов.Заголовок = "Выбор файла";
		ДиалогВыбораФайлов.МножественныйВыбор = Истина;
	
		ОбещаниеВыбора = ДиалогВыбораФайлов.ВыбратьАсинх();
		ВыбранныеФайлы = Ждать ОбещаниеВыбора;
		
		Если ЗначениеЗаполнено(ВыбранныеФайлы) Тогда
			Результат = СтрСоединить(ВыбранныеФайлы, ",");	
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные.ЗначениеАргумента = Результат;
		ОбработатьУстановкуАргумента();
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	//@skip-check event-heandler-boolean-param
	Выполнение = РежимРедактированияВключен;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПараметрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметров.ТекущиеДанные;
	ЗаполнитьПредставлениеПараметра(ТекущиеДанные, РазделительПараметраИАргумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеПараметра(ДанныеСтроки, Знач РазделительПараметраИАргумента)

Если ТипЗнч(РазделительПараметраИАргумента) = Тип("Число") Тогда
	ЗначениеРазделителя = ?(РазделительПараметраИАргумента = 0, " ", "=");	
Иначе
	ЗначениеРазделителя = РазделительПараметраИАргумента;
КонецЕсли;
	
Если СтрНачинаетсяС(ДанныеСтроки.Параметр, "<") Тогда
		ДанныеСтроки.Параметр = "";
	Иначе
		СоставСтроки = СтрРазделить(ДанныеСтроки.Параметр, ЗначениеРазделителя);
		ДанныеСтроки.Параметр = СоставСтроки[0];
	КонецЕсли;

	Если ПустаяСтрока(ДанныеСтроки.ПредставлениеПустогоЗначения) Или ПустаяСтрока(ДанныеСтроки.ТипАргумента) Тогда
		ПредставлениеЗначенияАргумента = "";
	Иначе
		ПредставлениеЗначенияАргумента = ?(ПустаяСтрока(ДанныеСтроки.Параметр), "", ЗначениеРазделителя)
			+ "<" + ДанныеСтроки.ПредставлениеПустогоЗначения + ">";
	КонецЕсли;

	ДанныеСтроки.ПредсталвлениеПараметра = ДанныеСтроки.Параметр + ПредставлениеЗначенияАргумента;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровСписокЗначенийАргументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СтруктураПараметровФормы = Новый Структура;
	ТекущаяСтрокаКоманд = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаКоманд = Неопределено Тогда
		ДанныеСпискаВыбора = Новый СписокЗначений;
		ДанныеСпискаВыбора.ТипЗначения = ОписаниеТипаСтрока(50);
	Иначе
		ДанныеСпискаВыбора = ТекущаяСтрокаКоманд.СписокЗначенийАргумента;
	КонецЕсли;

	СписокВариантовПодбора = ПолучитьСписокВариантовПодбора();

	СтруктураПараметровФормы.Вставить("СписокЗначенийАргумента", ДанныеСпискаВыбора);
	СтруктураПараметровФормы.Вставить("СписокВариантовПодбора", СписокВариантовПодбора);

	Если ТекущаяСтрокаКоманд.ТипАргумента <> "Список" Тогда
		ПоказатьПредупреждение(, "Для заполнения списка выбора укажите тип аргумента ""Список""");
		Возврат;
	КонецЕсли; 

	ОткрытьФорму("ВнешняяОбработка.ПомощникСозданияСкриптов.Форма.ФормаЗаполненияСписка",
				 СтруктураПараметровФормы,
				 Элемент,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровТипАргументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ВыбранноеЗначение <> "Список" И ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.СписокЗначенийАргумента = Новый СписокЗначений();
	КонецЕсли;		

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаПараметровИспользованиеПриИзменении(Элемент)

	ТекущаяСтрокаПараметров = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаПараметров.Использование Тогда
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		УстановитьОтметкуКоменды(ТекущаяСтрокаКоманд, Истина);
	КонецЕсли;

	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТаблицаПараметровИспользование 
	  Или Элемент.ТекущийЭлемент = Элементы.ТаблицаПараметровАргумент Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровАргументПриИзменении(Элемент)

	ОбработатьУстановкуАргумента();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПараметровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
	ТекущаяСтрокаПараметра = Элементы.ТаблицаПараметров.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрокаПараметра.КлючСвязи = ТекущаяСтрокаКоманд.КлючСвязи;
	КонецЕсли;
		
	Если ТекущаяСтрокаПараметра.ТипАргумента = "" 
		И СтрНайти(ТекущаяСтрокаПараметра.Параметр, "<") > 0 
		И СтрНайти(ТекущаяСтрокаПараметра.Параметр, ">") > 0 Тогда
			
		ТекущаяСтрокаПараметра.ТипАргумента = "Строка";		
	КонецЕсли;
	
	УстановитьОтборПараметровКоманды(ТекущаяСтрокаКоманд.КлючСвязи);

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура КомандаОткрытьИсторию(Команда)
	
	ОписаниеВыбора = ВыбратьИзСпискаАсинх(ИсторияСтрокиСкрипта);
	РезультатВыбора = Ждать ОписаниеВыбора;

	Если РезультатВыбора <> Неопределено И РезультатВыбора.Значение <> ТекстСкриптаПредставление Тогда
		Элементы.ГруппаСтриницыТерминала.ТекущаяСтраница = Элементы.СтраницаТекста;
		ТекстСкриптаПредставление = РезультатВыбора.Значение;
		РазобратьСтрокуСкрипта();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимРедактора(Команда)

	РежимРедактированияВключен = Не РежимРедактированияВключен;
	ОтображениеЭлементовРежимаРедактировния();

	Если РежимРедактированияВключен Тогда

		Для Каждого ТекущаяСтрокаКоманды Из ДеревоКоманд.ПолучитьЭлементы() Цикл
			СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
			СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
			ТекстСкрипта = "";
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьВБуфер(Команда)

	//@skip-check wrong-string-literal-content
	СкопироватьВБуферОбмена(ТекстСкриптаПредставление, ЭтотОбъект["ПолеHTMLБуфера"]);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные(Команда)

	СохранитьВыгрузитьСхемуВФайл();	

КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьДанные(Команда)


	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Заголовок = "ПоместитьФайлНаСерверАсинх";
	ПараметрыДиалога.МножественныйВыбор = Ложь;
	ПараметрыДиалога.Фильтр = "Файл XML|*.xml";
	
	ОписаниеФайла = Ждать ПоместитьФайлНаСерверАсинх(, , , ПараметрыДиалога);
	
	Если ОписаниеФайла <> Неопределено Тогда
		
		ЗагрузитьНастройкуНаСервере(ОписаниеФайла.Адрес);
		РазвернутьУзлыДерева(ДеревоКоманд);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции


&НаКлиенте
Процедура ПриИзмененииУтилиты()
	
	УстановитьВерсииПрограммы();
	ПрочитатьПараметрыИзМакета();
	РазвернутьУзлыДерева(ДеревоКоманд);
	ТекущаяУтилита = ИмяУтилиты;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуАргумента()
	
	ТекущаяСтрокаПараметров = Элементы.ТаблицаПараметров.ТекущиеДанные;
	Если ТекущаяСтрокаПараметров <> Неопределено И Не ТекущаяСтрокаПараметров.Использование Тогда
		ТекущаяСтрокаПараметров.Использование = Истина;
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		УстановитьОтметкуКоменды(ТекущаяСтрокаКоманд, Истина);
	КонецЕсли;
	
	УстановитьСтрокуСкрипта();

КонецПроцедуры

&НаКлиенте
Асинх Процедура СкопироватьПараметрыПриКопированииКоманды(КлючКопируемойСтроки, НовыйКлюч)
	
	ОжиданиеОтвета = ВопросАсинх("Скопировать параметры команды?", РежимДиалогаВопрос.ДаНет);
	Ответ = Ждать ОжиданиеОтвета;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СкопироватьПараметрыКоманды(КлючКопируемойСтроки, НовыйКлюч);
		УстановитьОтборПараметровКоманды(НовыйКлюч);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПараметровКоманды(КлючСвязи = Неопределено)
	
	Если КлючСвязи = Неопределено Тогда
		ТекущаяСтрокаКоманд = Элементы.ДеревоКоманд.ТекущиеДанные;
		Если ТекущаяСтрокаКоманд = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийКлючСвязи = ТекущаяСтрокаКоманд.КлючСвязи;
	Иначе
		ТекущийКлючСвязи = КлючСвязи;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("КлючСвязи", ТекущийКлючСвязи);
	Элементы.ТаблицаПараметров.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьПараметрыПриУдаленииКоманды(ТекущаяСтрокаКоманд)
	
	ОжиданиеОтвета = ВопросАсинх("Удалить строку?", РежимДиалогаВопрос.ДаНет);
	Ответ = Ждать ОжиданиеОтвета;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьКоманду(ТекущаяСтрокаКоманд);
		
		СтрокиДерева = ?(ТекущаяСтрокаКоманд.ПолучитьРодителя() = Неопределено,
							ДеревоКоманд.ПолучитьЭлементы(),
							ТекущаяСтрокаКоманд.ПолучитьРодителя().ПолучитьЭлементы());

		СтрокиДерева.Удалить(ТекущаяСтрокаКоманд);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьПараметры()
	
	ВыделенныеСтроки = Элементы.ТаблицаПараметров.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = "Удалить строки?";
	Иначе	
		ТекстВопроса = "Удалить строку?";
	КонецЕсли;
		
	ОжиданиеОтвета = ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Ответ = Ждать ОжиданиеОтвета;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МассивСтрок = Новый Массив;
		Для Каждого УдаляемаяСтрока Из ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(ТаблицаПараметров.НайтиПоИдентификатору(УдаляемаяСтрока));
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока Из МассивСтрок Цикл
			ТаблицаПараметров.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКоманду(СтрокаДереваКоманд)
	
	СтруктураПоиска = Новый Структура("КлючСвязи", СтрокаДереваКоманд.КлючСвязи); 
	МассивСтрокКопирования = ТаблицаПараметров.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаДляУдаления Из МассивСтрокКопирования Цикл
		ТаблицаПараметров.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	Для Каждого ПодчиненныеСтрока Из СтрокаДереваКоманд.ПолучитьЭлементы() Цикл
		УдалитьКоманду(ПодчиненныеСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВариантовПодбора()
	
	ТаблицаПараметровЗначение = РеквизитФормыВЗначение("ТаблицаПараметров");
	СтрокиСоСписком = ТаблицаПараметровЗначение.НайтиСтроки(Новый Структура("ТипАргумента", "Список"));
	ТаблицаПараметровЗначение = ТаблицаПараметровЗначение.Скопировать(СтрокиСоСписком, "СписокЗначенийАргумента");
	МассивСписков = ТаблицаПараметровЗначение.ВыгрузитьКолонку("СписокЗначенийАргумента");
	
	СписокВариантовПодбора = Новый СписокЗначений();
	СписокВариантовПодбора.ЗагрузитьЗначения(МассивСписков);
	
	Возврат СписокВариантовПодбора;
	
КонецФункции

// Обработать исключительные команды.
// 
// Убирает все пометки выбора команд текущего уровня если у текущей команды стоит признак Исключительная
// применяется для команд которые не могут выполнятся к одном скрипте.
// 
// Параметры:
//  ТекущаяСтрокаКоманды - ДанныеФормыЭлементДерева - Текущая строка команды
&НаКлиенте
Процедура ОбработатьИсключительныеКоманды(ТекущаяСтрокаКоманды)
	
	РодительТекущегоУровня = ТекущаяСтрокаКоманды.ПолучитьРодителя();
	Если РодительТекущегоУровня = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	СтрокиТекущегоУровня = РодительТекущегоУровня.ПолучитьЭлементы();
	
	Если ТекущаяСтрокаКоманды.Исключительная Тогда
		
		Для Каждого СтрокаУровня Из СтрокиТекущегоУровня Цикл
			Если СтрокаУровня = ТекущаяСтрокаКоманды Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаУровня.Исключительная Тогда
				СтрокаУровня.Использование = Ложь;
				СнятьПометкуПодчиненнойКоманды(СтрокаУровня);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПутьККаталогуПрограммы()
	
#Если ВебКлиент или МобильноеПриложениеКлиент Или МобильныйАвтономныйСервер Тогда
	Возврат "";
#Иначе
	Возврат КаталогПрограммы();
#КонецЕсли

КонецФункции

&НаКлиенте
Асинх Процедура СохранениеПриЗакрытии()

	ОбещаниеОтвета = ВопросАсинх("Схема изменена. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена);
	Ответ = Ждать ОбещаниеОтвета;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьВыгрузитьСхемуВФайл();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПутьНаСервере()
	
	ПутьКИсполняемомуФайлу = ПолучитьПутьККаталогуПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПараметрыКоманды(КлючКопируемойСтроки, НовыйКлюч)

	СтруктураПоиска = Новый Структура("КлючСвязи", КлючКопируемойСтроки); 
	МассивСтрокКопирования = ТаблицаПараметров.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаДляКопирования Из МассивСтрокКопирования Цикл
		НоваяСтрока = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДляКопирования);
		НоваяСтрока.КлючСвязи = НовыйКлюч;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБуферОбмена(Знач Значение, ПолеHTMLБуфера) Экспорт
	
	Сообщение = Значение;
	Значение = СтрЗаменить(Значение, "\", "\\");
	
	ПолеHTMLБуфера = СтрШаблон("<!DOCTYPE html>
							|<html>
							|	<body onload='copy()'>
							|		<input id='input' type='text'/>
							|		<script>
							|			function copy() {
							|				var text = '%1';
							|				var ua = navigator.userAgent;
							|				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
							|					window.clipboardData.setData('Text', text);
							|				} else {
							|					var copyText = document.getElementById('input');
							|					copyText.value = text;
							|					copyText.select();
							|					document.execCommand('copy');
							|				}
							|			}
							|		</script>
							|	</body>
							|</html>",
							Значение);   
	
	#Если Клиент Тогда
	ПоказатьОповещениеПользователя("Скопировано в буфер",, Сообщение, БиблиотекаКартинок.СкопироватьВБуфер);
	#КонецЕсли

КонецПроцедуры // СкопироватьВБуферОбмена()

&НаСервереБезКонтекста
Процедура ДобавитьЭлементыФормыДляHTMLБуфера(Объект, Элементы)
	
	ДобавляемыеРеквизиты	= Новый Массив;
	
	Реквизит_ПолеHTMLБуфера = Новый РеквизитФормы("ПолеHTMLБуфера", 
											Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки())
											,	
											, 
											"Поле буфера обмена");
	
	ДобавляемыеРеквизиты.Добавить(Реквизит_ПолеHTMLБуфера);
	
	Объект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	НовыйЭлементПолеHTML = Элементы.Добавить("ПолеHTMLБуфера", Тип("ПолеФормы"), Элементы.СтраницаБуфер);
	НовыйЭлементПолеHTML.Вид			= ВидПоляФормы.ПолеHTMLДокумента;
	НовыйЭлементПолеHTML.ПутьКДанным	= "ПолеHTMLБуфера";
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЭлементовРежимаРедактировния()

	Элементы.ФормаРежимРедактора.Пометка = РежимРедактированияВключен;

	Элементы.ФормаСохранитьДанные.Видимость	= РежимРедактированияВключен;
	Элементы.ФормаЗагрузитьДанные.Видимость	= РежимРедактированияВключен;

	Элементы.ТаблицаПараметровСписокЗначенийАргумента.Видимость	= РежимРедактированияВключен;
	Элементы.ТаблицаПараметровТипАргумента.Видимость					= РежимРедактированияВключен;
	
	Элементы.ДеревоКомандСсылкаНаИсточник.Видимость = РежимРедактированияВключен;

	Элементы.ДеревоКоманд.ИзменятьПорядокСтрок	= РежимРедактированияВключен;
	Элементы.ДеревоКоманд.ИзменятьСоставСтрок	= РежимРедактированияВключен;

	Элементы.ТаблицаПараметров.ИзменятьПорядокСтрок	= РежимРедактированияВключен;
	Элементы.ТаблицаПараметров.ИзменятьСоставСтрок	= РежимРедактированияВключен;

	Элементы.ТаблицаПараметровКонтекстноеМенюГруппаРедактирования.Видимость	= РежимРедактированияВключен;
	Элементы.ДеревоКомандКонтекстноеМенюГруппаРедактирование.Видимость		= РежимРедактированияВключен;
	
	Элементы.ДеревоКомандИсключительная.Видимость = РежимРедактированияВключен;

	Элементы.ДеревоКомандИспользование.Видимость			= Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровИспользование.Видимость	= Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровАргумент.Видимость			= Не РежимРедактированияВключен;

	Элементы.ГруппаСтриницыТерминала.Видимость	= Не РежимРедактированияВключен;

	Элементы.ДеревоКомандКоманда.ТолькоПросмотр	= Не РежимРедактированияВключен;
	Элементы.ДеревоКомандОписание.ТолькоПросмотр	= Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровПараметр.ТолькоПросмотр	= Не РежимРедактированияВключен;
	Элементы.ТаблицаПараметровОписание.ТолькоПросмотр	= Не РежимРедактированияВключен;

	Элементы.Утилита.Доступность = Не РежимРедактированияВключен;
		
	Элементы.ВерсияУтилиты.РежимВыбораИзСписка = Не РежимРедактированияВключен;
	
	Элементы.ГруппаНастройкиШаблонаПарметра.Видимость	= РежимРедактированияВключен;
	Элементы.ШаблонПоискаКоманд.Видимость					= РежимРедактированияВключен;

	Элементы.ТаблицаПараметровПараметр.Видимость							= РежимРедактированияВключен;
	Элементы.ТаблицаПараметровПредставлениеПустогоЗначения.Видимость	= РежимРедактированияВключен;

КонецПроцедуры

&НаСервере
Процедура УстановитьВерсииПрограммы()
	
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	Макеты = ЭтаОбработка.Метаданные().Макеты;

	Элементы.ВерсияУтилиты.СписокВыбора.Очистить();
	ТекущаяВерсияУтилиты = "";
	Для Каждого МакетОбработки Из Макеты Цикл
		СоставСтрокиПрограммы = СтрРазделить(МакетОбработки.Синоним, " ");
		Если СоставСтрокиПрограммы[0] = ИмяУтилиты Тогда
			ТекущаяВерсияУтилиты = СоставСтрокиПрограммы[СоставСтрокиПрограммы.ВГраница()];
			Элементы.ВерсияУтилиты.СписокВыбора.Добавить(ТекущаяВерсияУтилиты);
		КонецЕсли;

	КонецЦикла;

	ВерсияУтилиты = ТекущаяВерсияУтилиты;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыИзМакета()

	ДеревоЗначенийКоманд		= РеквизитФормыВЗначение("ДеревоКоманд", Тип("ДеревоЗначений"));
	ТаблицаЗначенийПараметров	= РеквизитФормыВЗначение("ТаблицаПараметров", Тип("ТаблицаЗначений"));

	ДеревоЗначенийКоманд.Строки.Очистить();
	ТаблицаЗначенийПараметров.Очистить();

	ИмяМакета = "_" + ИмяУтилиты + "_" + СтрЗаменить(ВерсияУтилиты, ".", "_");

	ЭтаОбработка = РеквизитФормыВЗначение("Объект");

	Попытка
		МакетСтруктуры = ЭтаОбработка.ПолучитьМакет(ИмяМакета);
		СтрокаДанных = МакетСтруктуры.ПолучитьТекст();
		ЗагрузитьНастройкуНаСервере(СтрокаДанных);	
	Исключение
		СообщитьПользователю(ОписаниеОшибки());
		ЗначениеВРеквизитФормы(ДеревоЗначенийКоманд, "ДеревоКоманд");
		ЗначениеВРеквизитФормы(ТаблицаЗначенийПараметров, "ТаблицаПараметров");
	КонецПопытки;

	ТекстСкрипта = "";	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(ТекстСообщения)
	
	СообщениеПользователю = Новый СообщениеПользователю();
	СообщениеПользователю.Текст = ТекстСообщения;
	СообщениеПользователю.Сообщить();		
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуПодчиненнойКоманды(Знач ТекущаяСтрокаКоманды)

	СтрокиПодчиненныхКоманд = ТекущаяСтрокаКоманды.ПолучитьЭлементы();
	
	Для Каждого ТекущаяСтрокаКоманды Из СтрокиПодчиненныхКоманд Цикл
		ТекущаяСтрокаКоманды.Использование = Ложь;
		СнятьПометкуПараметровКоманды(ТекущаяСтрокаКоманды.КлючСвязи);
		СнятьПометкуПодчиненнойКоманды(ТекущаяСтрокаКоманды);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуРодительскойКоманды(ТекущаяСтрокаКоманды)

	РодительскаяСтрокаКоманды = ТекущаяСтрокаКоманды.ПолучитьРодителя();
	Если РодительскаяСтрокаКоманды <> Неопределено Тогда
		РодительскаяСтрокаКоманды.Использование = Истина;
		ОбработатьИсключительныеКоманды(ТекущаяСтрокаКоманды);
		УстановитьПометкуРодительскойКоманды(РодительскаяСтрокаКоманды);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуПараметровКоманды(КлючСвязи)

	//REF: Избавиться от рекурсивного поиска  
	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи, Использование", КлючСвязи, Истина));
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		СтрокаПараметра.Использование = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуОбязательныхПараметров(КлючСвязи)

	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи, Использование", КлючСвязи, Истина));
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		Если СтрНачинаетсяС(СтрокаПараметра.Параметр, "<") И СтрЗаканчиваетсяНа(СтрокаПараметра.Параметр, ">") Тогда
			СтрокаПараметра.Использование = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуКоменды(Знач СтрокаКоманд, Отметка)

	СтрокаКоманд.Использование = Отметка;
	ОбработатьИсключительныеКоманды(СтрокаКоманд);
	СтрокаКоманд = СтрокаКоманд.ПолучитьРодителя();
	Если СтрокаКоманд <> Неопределено Тогда
		УстановитьОтметкуКоменды(СтрокаКоманд, Отметка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрокуСкрипта()

	СтруктураТекстаСкрипта = ПолучитьТекстИПердставлениеСкрипта();
	
	Если Не ЗначениеЗаполнено(СтруктураТекстаСкрипта) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСкрипта = СтруктураТекстаСкрипта.ФорматированныйТекстСкрипта;
	ТекстСкриптаПредставление = СтруктураТекстаСкрипта.ТекстСкрипта;
	
	Если Элементы.ГруппаСтриницыТерминала.ТекущаяСтраница = Элементы.СтраницаТекста Тогда
		Элементы.ГруппаСтриницыТерминала.ТекущаяСтраница = Элементы.СтраницаТерминал;
	КонецЕсли;

	ЗаписатьСтрокуВИсторию();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстИПердставлениеСкрипта()
	
	Если МестоИсполнения = 0 Тогда
		РазделительПути = ПолучитьРазделительПутиКлиента();
	Иначе
		РазделительПути = ПолучитьРазделительПутиНаСервере();
	КонецЕсли;
	
	СтрокаПутиКФайлу = СтрокаБезГраничныхСимволов(ПутьКИсполняемомуФайлу);
	
	Если Прав(СтрокаПутиКФайлу, 1) <> РазделительПути Тогда
		СтрокаПутиКФайлу = СтрокаПутиКФайлу + РазделительПути;
	КонецЕсли;
		
	Если СтрНайти(СтрокаПутиКФайлу, " ") > 0 Тогда
		СтрокаПутиКФайлу = """" + ПутьКИсполняемомуФайлу + """";
	Иначе
		СтрокаПутиКФайлу = ПутьКИсполняемомуФайлу;
	КонецЕсли;
	
	ФорматированныйТекстСкрипта = ФорматированныйТекстСкрипта(СтрокаПутиКФайлу);
	
	Если Не ЗначениеЗаполнено(ФорматированныйТекстСкрипта) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТекстаСкрипта = Новый Структура("ТекстСкрипта, ФорматированныйТекстСкрипта");
	СтруктураТекстаСкрипта.ФорматированныйТекстСкрипта	= ФорматированныйТекстСкрипта;
	СтруктураТекстаСкрипта.ТекстСкрипта					= Строка(ФорматированныйТекстСкрипта);
	
	Возврат СтруктураТекстаСкрипта;
	
КонецФункции

&НаКлиенте
Функция ФорматированныйТекстСкрипта(СтрокаПутиКФайлу)
	
	ЦветПути = WebЦвета.СеребристоСерый;

	МассивФорматированныхСтроки = Новый Массив;
	//ДобавитьПодстрокуВМассив(МассивФорматированныхСтроки, СтрокаПутиКФайлу, ЦветПути);
	
	СтрокиДереваКоманд = ДеревоКоманд.ПолучитьЭлементы();

	ЗаполнитьПредставлениеФорматированнойСтроки(МассивФорматированныхСтроки, СтрокиДереваКоманд);
	
	Если МассивФорматированныхСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоследнееЗначениеМассива = МассивФорматированныхСтроки.Получить(МассивФорматированныхСтроки.ВГраница());
	
	Если Не ЗначениеЗаполнено(ПоследнееЗначениеМассива) Тогда
		МассивФорматированныхСтроки.Удалить(МассивФорматированныхСтроки.ВГраница());
	КонецЕсли;
	
	ФорматированнаяСтрокаПути = Новый ФорматированнаяСтрока(СтрокаПутиКФайлу, , ЦветПути);
	МассивФорматированныхСтроки.Вставить(0, ФорматированнаяСтрокаПути);
	
	Возврат Новый ФорматированнаяСтрока(МассивФорматированныхСтроки);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПредставлениеФорматированнойСтроки(МассивФорматированныхСтроки, СтрокиДереваКоманд)
	
	ЦветРазделителя	= WebЦвета.СветлоГрифельноСерый;
	ЦветКоманды		= WebЦвета.Малиновый;
	ЦветПараметра	= WebЦвета.СветлоГрифельноСерый;
	ЦветАргумента	= WebЦвета.НебесноГолубой;
	
	Для Каждого СтрокаДереваКоманд Из СтрокиДереваКоманд Цикл

		Если Не СтрокаДереваКоманд.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДереваКоманд.Команда) Тогда
			ДобавитьПодстрокуВМассив(МассивФорматированныхСтроки, СтрокаДереваКоманд.Команда, ЦветКоманды);
			МассивФорматированныхСтроки.Добавить(" ");
		КонецЕсли;
		
		СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаДереваКоманд.КлючСвязи));

		Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
			Если Не СтрокаПараметра.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СоставПредставления = ПолучитьСоставПредставления(СтрокаПараметра);
			
			ДобавитьПодстрокуВМассив(МассивФорматированныхСтроки, СоставПредставления.Параметр, ЦветПараметра);
			
			Если ЗначениеЗаполнено(СоставПредставления.ЗначениеАргумента) 
				И ЗначениеЗаполнено(СоставПредставления.Параметр) Тогда
					
				ДобавитьПодстрокуВМассив(МассивФорматированныхСтроки, СоставПредставления.Разделитель, ЦветРазделителя);
				
			КонецЕсли;
			
			ДобавитьПодстрокуВМассив(МассивФорматированныхСтроки, СоставПредставления.ЗначениеАргумента, ЦветАргумента);
			
			МассивФорматированныхСтроки.Добавить(" ");
		КонецЦикла;

		ПодчиненныеСтроки = СтрокаДереваКоманд.ПолучитьЭлементы();
		ЗаполнитьПредставлениеФорматированнойСтроки(МассивФорматированныхСтроки, ПодчиненныеСтроки);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодстрокуВМассив(МассивФорматированныхСтроки, Подстрока, ЦветТекста)
	
	Если Подстрока <> "" Тогда
		МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(Подстрока, , ЦветТекста));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УбратьЛишниеСимволы(Знач СтрокаТекстаСкрипта)
	
	//@skip-check undefined-function
	Возврат СтрЗаменитьПоРегулярномуВыражению(СтрокаТекстаСкрипта, "[\s]+"," ");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРазделительПутиНаСервере()
		
	Возврат ПолучитьРазделительПутиСервера();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыКоманды(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтрокиДереваКоманд)

//	ЦветКоманды = WebЦвета.Малиновый;
//	
//	Для Каждого СтрокаДереваКоманд Из СтрокиДереваКоманд Цикл
//
//		Если Не СтрокаДереваКоманд.Использование Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СтрокаКомандыТекст = ?(ЗначениеЗаполнено(СтрокаДереваКоманд.Команда), Отступ, "") + СтрокаДереваКоманд.Команда;
//		МассивФорматированныхСтроки.Добавить(" ");
//		МассивФорматированныхСтроки.Добавить(Новый ФорматированнаяСтрока(СокрЛП(СтрокаКомандыТекст), , ЦветКоманды, , ));
//		ТекстСкриптаПредставление = ТекстСкриптаПредставление + " " + СтрокаДереваКоманд.Команда;
//		Отступ = " ";
//		
//		СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаДереваКоманд.КлючСвязи));
//
//		Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
//			Если Не СтрокаПараметра.Использование Тогда
//				Продолжить;
//			КонецЕсли;
//
//			ЗаполнитьСтрокуПараметра(МассивФорматированныхСтроки, ТекстСкриптаПредставление, СтрокаПараметра);
//		КонецЦикла;
//
//		ПодчиненныеСтроки = СтрокаДереваКоманд.ПолучитьЭлементы();
//		ЗаполнитьПараметрыКоманды(МассивФорматированныхСтроки, ТекстСкриптаПредставление, ПодчиненныеСтроки);
//
//	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Функция ПолучитьСоставПредставления(СтруктураСтроки)

	МассивТиповВКовычках = Новый Массив;
	МассивТиповВКовычках.Добавить("Строка");
	МассивТиповВКовычках.Добавить("Файл");
	МассивТиповВКовычках.Добавить("Каталог");
	
	СоответствиеРазделителей = Новый Соответствие;
	СоответствиеРазделителей.Вставить(0, " ");
	СоответствиеРазделителей.Вставить(1, "=");
	
	МассивПараметорв = СтрРазделить(СокрЛП(СтруктураСтроки.Параметр), "|");
	ПредставлениеПараметра = СокрЛП(МассивПараметорв[0]);
	Если МассивТиповВКовычках.Найти(СтруктураСтроки.ТипАргумента) = Неопределено Тогда
		ПредставлениеКовычки = "";
	Иначе
		ПредставлениеКовычки = """";
	КонецЕсли;

	СтрокаПараметра = СтруктураСтроки.Параметр
						+ РазделительПараметраИАргумента
						+ ПредставлениеКовычки
						+ СтруктураСтроки.ЗначениеАргумента
						+ ПредставлениеКовычки;

	Если ЗначениеЗаполнено(СтруктураСтроки.ЗначениеАргумента) Тогда
		
		Если СтрНачинаетсяС(СтруктураСтроки.ЗначениеАргумента, """") И СтрЗаканчиваетсяНа(СтруктураСтроки.ЗначениеАргумента, """") Тогда
			ПредставлениеАргумента = СтруктураСтроки.ЗначениеАргумента;
		Иначе
			ПредставлениеАргумента = ПредставлениеКовычки + СтруктураСтроки.ЗначениеАргумента + ПредставлениеКовычки;
		КонецЕсли;
		
	ИначеЕсли СтруктураСтроки.ПредставлениеПустогоЗначения = "" Или СтрокаПараметра = ПредставлениеПараметра Тогда
		ПредставлениеАргумента = "";	
	Иначе
		ПредставлениеАргумента = "<" + СтруктураСтроки.ПредставлениеПустогоЗначения + ">";
	КонецЕсли;

	СтруктураПредставления = Новый Структура("Параметр, Разделитель, ЗначениеАргумента");

	СтруктураПредставления.Параметр				= СтруктураСтроки.Параметр;
	СтруктураПредставления.Разделитель			= СоответствиеРазделителей.Получить(РазделительПараметраИАргумента);
	СтруктураПредставления.ЗначениеАргумента	= ПредставлениеАргумента;

	Возврат СтруктураПредставления;

КонецФункции

&НаСервере
Функция ВыгрузитьНастройкаНаСервере(ТекущаяУтилита, ТекущаяВерсияУтилиты)

	// Отладка
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		ЗаполнитьПредставлениеПараметра(СтрокаПараметров, РазделительПараметраИАргумента);
	КонецЦикла;
	// Конец отладки

	СтруктураВыгрузки = Новый Структура;
	
	ДеревоКомандОбъект		= РеквизитФормыВЗначение("ДеревоКоманд");
	ТаблицаПараметровОбъект	= РеквизитФормыВЗначение("ТаблицаПараметров");

	ТаблицаПараметровОбъект.Колонки.Удалить(ТаблицаПараметровОбъект.Колонки.ЗначениеАргумента);
	Если РежимРедактированияВключен Тогда
		СтруктураВыгрузки.Вставить("Программа",							ИмяУтилиты);
		СтруктураВыгрузки.Вставить("ВерсияПрограммы",						ВерсияУтилиты);
		СтруктураВыгрузки.Вставить("ШаблонПоискаКоманд",					ШаблонПоискаКоманд);
		СтруктураВыгрузки.Вставить("ШаблонПоискаПараметров",			ШаблонПоискаПараметров);
		СтруктураВыгрузки.Вставить("РазделительПараметраИАргумента",	РазделительПараметраИАргумента);
	Иначе
		СтруктураВыгрузки.Вставить("Программа",		ТекущаяУтилита);
		СтруктураВыгрузки.Вставить("ВерсияПрограммы",	ТекущаяВерсияУтилиты);
	КонецЕсли;
	
	СтруктураВыгрузки.Вставить("UID_Модели",			Новый УникальныйИдентификатор());	
	СтруктураВыгрузки.Вставить("ДеревоКоманд",		ДеревоКомандОбъект);
	СтруктураВыгрузки.Вставить("ТаблицаПараметров",	ТаблицаПараметровОбъект);


	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ВременныйФайл);
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СтруктураВыгрузки);
	ЗаписьXML.Закрыть();
	
	Результат = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ВременныйФайл));
	
	УдалитьФайлы(ВременныйФайл);
	
//	ЗаписьJSON = Новый ЗаписьJSON;
//	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
//	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
//	
//	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, СтруктураВыгрузки);
//	
//	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;

КонецФункции


&НаСервере
Процедура ЗагрузитьНастройкуНаСервере(АдресДанных)
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	
	ДанныеФайлаИзХранилища = ПолучитьИзВременногоХранилища(АдресДанных);
	ДанныеФайлаИзХранилища.Записать(ВременныйФайл);
	
	НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременныйФайл);
	ПрочитанныеДанные = НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
			
	УдалитьФайлы(ВременныйФайл);	

	ЗагружаемаяТаблиаПараметров = ПрочитанныеДанные.ТаблицаПараметров;
	ЗагружаемоеДеревоКоманд = ПрочитанныеДанные.ДеревоКоманд;

	Если ЗагружаемоеДеревоКоманд.Колонки.Найти("Исключительная") = Неопределено Тогда
		ЗагружаемоеДеревоКоманд.Колонки.Добавить("Исключительная", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	Если ЗагружаемоеДеревоКоманд.Колонки.Найти("СсылкаНаИсточник") = Неопределено Тогда
		ЗагружаемоеДеревоКоманд.Колонки.Добавить("СсылкаНаИсточник", ОписаниеТипаСтрока(512));
	КонецЕсли;

	Если ЗагружаемаяТаблиаПараметров.Колонки.Найти("ЗначениеАргумента") = Неопределено Тогда
		ЗагружаемаяТаблиаПараметров.Колонки.Добавить("ЗначениеАргумента", ОписаниеТипаСтрока(512));
	КонецЕсли;

	Если ЗагружаемаяТаблиаПараметров.Колонки.Найти("ПредсталвлениеПараметра") = Неопределено Тогда
		ЗагружаемаяТаблиаПараметров.Колонки.Добавить("ПредсталвлениеПараметра", ОписаниеТипаСтрока(250));
	КонецЕсли;

	ЗначениеВРеквизитФормы(ЗагружаемоеДеревоКоманд, "ДеревоКоманд");
	ЗначениеВРеквизитФормы(ЗагружаемаяТаблиаПараметров, "ТаблицаПараметров");

	ПрочитанныеДанные.Свойство("Программа",							ИмяУтилиты);
	ПрочитанныеДанные.Свойство("ВерсияПрограммы",						ВерсияУтилиты);
	ПрочитанныеДанные.Свойство("ШаблонПоискаКоманд",					ШаблонПоискаКоманд);
	ПрочитанныеДанные.Свойство("ШаблонПоискаПараметров",			ШаблонПоискаПараметров);
	ПрочитанныеДанные.Свойство("РазделительПараметраИАргумента",	РазделительПараметраИАргумента);

КонецПроцедуры

&НаКлиенте
Асинх Процедура СохранитьВыгрузитьСхемуВФайл(Отказ = Ложь)
	
	СтрокиТекущегоУровня = ДеревоКоманд.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровня Из СтрокиТекущегоУровня Цикл
		Если СтрокаУровня.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУровня.Использование = Ложь;
		СнятьПометкуПодчиненнойКоманды(СтрокаУровня);
	КонецЦикла;
	
	Если РежимРедактированияВключен Тогда
		ПолноеИмяФайла = "_" + ИмяУтилиты + "_" + СтрЗаменить(ВерсияУтилиты, ".", "_");
	Иначе
		ПолноеИмяФайла = "_" + ТекущаяУтилита + "_" + СтрЗаменить(ТекущаяВерсияУтилиты, ".", "_");
	КонецЕсли;

	ПолноеИмяФайла = ПолноеИмяФайла + ".xml";
	
	ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайлов.Заголовок = "Выбор файла для сохранения";
	ДиалогВыбораФайлов.МножественныйВыбор = Ложь;
	ДиалогВыбораФайлов.Фильтр = "Файл XML|*.xml";
	ДиалогВыбораФайлов.ПолноеИмяФайла = ПолноеИмяФайла;
	ВыбранныйФайл = Ждать ДиалогВыбораФайлов.ВыбратьАсинх();
	Если ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		АдресВоВременномХранилище = ВыгрузитьНастройкаНаСервере(ТекущаяУтилита, ТекущаяВерсияУтилиты);
		Ждать ПолучитьФайлССервераАсинх(АдресВоВременномХранилище, ВыбранныйФайл[0]);
		Модифицированность = Ложь;	
	Иначе
		Отказ = Истина;
	КонецЕсли;
		
КонецПроцедуры

// Создает объект ОписаниеТипов, содержащий тип Строка.
//
// Параметры:
//  ДлинаСтроки - Число - длина строки.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Строка.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаСтрока(ДлинаСтроки)

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));

КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Число.
//
// Параметры:
//  Разрядность - Число - общее количество разрядов числа (количество разрядов
//                        целой части плюс количество разрядов дробной части).
//  РазрядностьДробнойЧасти - Число - число разрядов дробной части.
//  ЗнакЧисла - ДопустимыйЗнак - допустимый знак числа.
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Число.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти = 0, Знач ЗнакЧисла = Неопределено)
	
	Если ЗнакЧисла = Неопределено Тогда 
		ЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла));
	
КонецФункции

&НаКлиенте
Процедура РазвернутьУзлыДерева(УзлыДереваКоманд, КорневойУзел = Истина)

	Узлы = УзлыДереваКоманд.ПолучитьЭлементы();
	
	Для Каждого Узел Из Узлы Цикл
		Если Узел.Использование Или КорневойУзел Тогда
			Элементы.ДеревоКоманд.Развернуть(Узел.ПолучитьИдентификатор());
			РазвернутьУзлыДерева(Узел, Ложь);
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РазобратьСтрокуСкрипта()
	
	Если Не РегулярныеВыраженияДоступны() Тогда;
		Возврат;
	КонецЕсли;
	
	СтруктураСкрипта = СтруктураСкриптаИзСтроки(ТекстСкриптаПредставление);
	
	ИмяУтилиты = СтруктураСкрипта.ИмяУтилиты;
	ПриИзмененииУтилиты();
	
	УстановитьАктивностьКоманд(ДеревоКоманд, СтруктураСкрипта.ГруппыПодстрок);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьКоманд(ЭлементДерева, ГруппыПодстрок)
	
	Если Не ЗначениеЗаполнено(ГруппыПодстрок) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДереваКоманд = ЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого СтрокаДереваКоманд Из ЭлементыДереваКоманд Цикл
		
		// REF: Убрать повторное использование
		Если СтрокаДереваКоманд.Команда = "" Тогда
			ЗаполнитьЗначенияПараметров(СтрокаДереваКоманд.КлючСвязи, ГруппыПодстрок);
			УстановитьАктивностьКоманд(СтрокаДереваКоманд, ГруппыПодстрок);
			Продолжить;
		КонецЕсли;
		
		ПодстрокаКоманды = ГруппыПодстрок.Получить(СтрокаДереваКоманд.Команда);
		
		Если ПодстрокаКоманды = Неопределено Тогда
			УстановитьАктивностьКоманд(СтрокаДереваКоманд, ГруппыПодстрок);
			Продолжить;
		КонецЕсли;
		
		СтрокаДереваКоманд.Использование = Истина;
		УстановитьПометкуРодительскойКоманды(СтрокаДереваКоманд);
		УстановитьПометкуОбязательныхПараметров(СтрокаДереваКоманд.КлючСвязи);
		
		ЗаполнитьЗначенияПараметров(СтрокаДереваКоманд.КлючСвязи, ГруппыПодстрок, ПодстрокаКоманды);
		
		УстановитьАктивностьКоманд(СтрокаДереваКоманд, ГруппыПодстрок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗначенияПараметров(КлючСвязи, ГруппыПодстрок, ПодстрокаКоманды = Неопределено)
	
	СтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	// REF: Уменьшить когнитивную сложность
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		
		Если ЗначениеЗаполнено(ПодстрокаКоманды) И ТипЗнч(ПодстрокаКоманды) = Тип("Соответствие") Тогда
			ПодстрокаПараметров = ПодстрокаКоманды.Получить(СтрокаПараметра.Параметр);
		Иначе
			ПодстрокаПараметров = Неопределено;
		КонецЕсли;
		
		Если ПодстрокаПараметров = Неопределено Тогда
			
			ПодстрокаПараметров = ГруппыПодстрок.Получить(СтрокаПараметра.Параметр);
			Если ЗначениеЗаполнено(ПодстрокаПараметров) Тогда
				
				СтрокаПараметра.Использование = Истина;
				Если ТипЗнч(ПодстрокаПараметров) = Тип("Соответствие") Тогда
					СтрокаПараметра.ЗначениеАргумента = СтрокаБезГраничныхСимволов(ПодстрокаПараметров.Получить(""));
				Иначе
					СтрокаПараметра.ЗначениеАргумента = СтрокаБезГраничныхСимволов(ПодстрокаПараметров);
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ПодстрокаКоманды) Тогда
			
			СтрокаПараметра.Использование = Истина;
			СтрокаПараметра.ЗначениеАргумента = СтрокаБезГраничныхСимволов(ПодстрокаПараметров);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаБезГраничныхСимволов(Знач СтрокаИсходная, СимволНачала = """", СимволОкончания = """")
	
	СтрокаИсходная = СокрЛП(СтрокаИсходная);
	
	Если СтрНачинаетсяС(СтрокаИсходная, СимволНачала) И СтрЗаканчиваетсяНа(СтрокаИсходная, СимволОкончания) Тогда
		СтрокаИсходная = Сред(СтрокаИсходная, 2, СтрДлина(СтрокаИсходная) - 2);
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаИсходная);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметры(СтрокиПараметров, СтруктураПараметров)
	
	Для Каждого СтрокаПараметра Из СтрокиПараметров Цикл
		ПараметрЗначение = СтруктураПараметров.Получить(СтрокаПараметра.Параметр);
		Если ПараметрЗначение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПараметра.Использование			= Истина;
		СтрокаПараметра.ЗначениеАргумента	= ПараметрЗначение;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция КлючДереваКоманд(ИмяКоманды, ЭлементДерева)

	ЭлементыДереваКоманд = ЭлементДерева.ПолучитьЭлементы();
	Для Каждого СтрокаДереваКоманд Из ЭлементыДереваКоманд Цикл
		
		Если СтрокаДереваКоманд.Команда = ИмяКоманды Тогда
			Возврат СтрокаДереваКоманд.КлючСвязи;
		Иначе
			КлючСвязи = КлючДереваКоманд(ИмяКоманды, СтрокаДереваКоманд);
			Если КлючСвязи <> Неопределено Тогда
				Возврат КлючСвязи;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция СтруктураСкриптаИзСтроки(ТекстСкрипта);
	
	ПараметрыШаблоновСкрипта	= ШаблоныРазбораСкриптаПоПрограммам();
	
	ПодстрокаИменПрограмм = ПараметрыШаблоновСкрипта.ПодстрокаИменПрограмм;
	ШаблоныРазбораСкрипта = ПараметрыШаблоновСкрипта.ШаблоныРазбораСкрипта;
	
	ШаблонПоискаПрограммы	= "(""?[^""]+""?)(" + ПодстрокаИменПрограмм + ") (.*)$";
	
	СтруктураСкрипта = Новый Структура("ПутьКПрограмме, ИмяУтилиты, ГруппыПодстрок");
	
	//@skip-check undefined-function
	ВхождениеИмениПрограммы = СтрНайтиПоРегулярномуВыражению(ТекстСкрипта, ШаблонПоискаПрограммы);
	
	Если ВхождениеИмениПрограммы.НачальнаяПозиция > 0 Тогда
		ГруппыПутиИИмениПрограммы = ВхождениеИмениПрограммы.ПолучитьГруппы();
		
		Если ГруппыПутиИИмениПрограммы.Количество() > 1 Тогда
			
			ПутьКПрограмме	= ГруппыПутиИИмениПрограммы[0].Значение;
			ИмяУтилиты		= ГруппыПутиИИмениПрограммы[1].Значение;
			ВерсияУтилиты	= ПолучитьВерсиюПрограммыИзПути(ПутьКПрограмме, ИмяУтилиты);
			СтрокаКомманд	= ГруппыПутиИИмениПрограммы[2].Значение;
			
			//СтруктураШаблоновСкрипта	= ШаблоныРазбораСкрипта[ИмяУтилиты];
			//КомандыИПараметры			= ПолучитьСтруктуруКоманд_1cv8(СтрокаКомманд, СтруктураШаблоновСкрипта);
			КомандыИПараметры			= ПолучитьСтруктуруКомадУтилиты(СтрокаКомманд, ИмяУтилиты);
			
			СтруктураСкрипта.ПутьКПрограмме	= СтрЗаменить(ПутьКПрограмме, """", "");
			СтруктураСкрипта.ИмяУтилиты			= ИмяУтилиты;
			СтруктураСкрипта.ГруппыПодстрок	= КомандыИПараметры;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураСкрипта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВерсиюПрограммыИзПути(ПутьКПрограмме, ИмяУтилиты)
	
	Если ИмяУтилиты = "1cv8" Тогда
		ШаблонПоискаВерсии = "(?<=[\/|\\])8.3.\d{1,2}(?=\.)";
	КонецЕсли;

	//@skip-check undefined-function
	ВхождениеВерсииПрограммы = СтрНайтиПоРегулярномуВыражению(ПутьКПрограмме, ШаблонПоискаВерсии);
	
	Возврат ВхождениеВерсииПрограммы.Значение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруКомадУтилиты(СтрокаКомманд, ИмяУтилиты)
	
	Если ИмяУтилиты = "1cv8" Тогда
		
			СтруктураШаблона = Новый Структура;
			СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"(DESIGNER|ENTERPRISE|CREATEINFOBASE|[\/][\w]+)([^\/]+)");
			СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(^""[^""]+"")|(-[a-zA-Z]+)([^-]*)");	
			
			КомандыИПараметры = ПолучитьСтруктуруКоманд_1cv8(СтрокаКомманд, СтруктураШаблона);
			
	ИначеЕсли ИмяУтилиты = "ibcmd" Тогда
			//Для утилиты ibcmd
			СтруктураШаблона = Новый Структура;
			СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"(?<=\s|^)\w+(?=\s)()");
			СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(-\w+)?([^-]*|[+-])");
			
			КомандыИПараметры = ПолучитьСтруктуруКоманд_ibcmd(СтрокаКомманд, СтруктураШаблона);
			
	КонецЕсли;
	
	Возврат КомандыИПараметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруКоманд_1cv8(СтрокаКомманд, СтруктураШаблоновСкрипта)

	ШаблонПоискаКоманд		= СтруктураШаблоновСкрипта.ШаблонПоискаКоманд;
	ШаблонПоискаПараметров	= СтруктураШаблоновСкрипта.ШаблонПоискаПараметров;

	//@skip-check undefined-function
	ГруппыКомандСкрипта = СтрНайтиВсеПоРегулярномуВыражению(СтрокаКомманд, ШаблонПоискаКоманд, Истина);

	КомандыИПараметры = Новый Соответствие;
	
	Для Каждого КомандаСкрипта Из ГруппыКомандСкрипта Цикл

		ГруппаКоманды = КомандаСкрипта.ПолучитьГруппы();

		Если ГруппаКоманды.Количество() <= 1 Тогда
			Продолжить;
		КонецЕсли;

		ИмяКоманды		= СокрЛП(ГруппаКоманды[0].Значение);
		СтрокаПараметров	= СокрЛП(ГруппаКоманды[1].Значение);
		
		Если Не ЗначениеЗаполнено(СтрокаПараметров) Тогда
			КомандыИПараметры.Вставить(ИмяКоманды, СтрокаПараметров);
			Продолжить;
		КонецЕсли;
		
		//@skip-check undefined-function
		ГруппыПараметорвКоманды = СтрНайтиВсеПоРегулярномуВыражению(СтрокаПараметров, ШаблонПоискаПараметров);

		ЗначениеПараметра = "";

		Если ГруппыПараметорвКоманды.Количество() = 0 Тогда
			ЗначениеПараметра = СокрЛП(СтрокаПараметров);
//		ИначеЕсли ГруппыПараметорвКоманды.Количество() = 1 Тогда
//			ЗначениеПараметра = ГруппыПараметорвКоманды[0].Значение;
		Иначе
			ЗначениеПараметра = ЗначенияГруппыПараметров(ГруппыПараметорвКоманды);
		КонецЕсли;

		КомандыИПараметры.Вставить(ИмяКоманды, ЗначениеПараметра);
		
	КонецЦикла;

	Возврат КомандыИПараметры;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруКоманд_ibcmd(СтрокаКомманд, СтруктураШаблоновСкрипта)

	ШаблонПоискаКоманд		= СтруктураШаблоновСкрипта.ШаблонПоискаКоманд;
	ШаблонПоискаПараметров	= СтруктураШаблоновСкрипта.ШаблонПоискаПараметров;

	//@skip-check undefined-function
	ГруппыКомандСкрипта = СтрНайтиВсеПоРегулярномуВыражению(СтрокаКомманд, ШаблонПоискаКоманд, Истина);

	КомандыИПараметры = Новый Соответствие;
	
	Для Каждого КомандаСкрипта Из ГруппыКомандСкрипта Цикл
		
		//ДеревоКоманд.КомандаСкрипта.Значение
		
		ГруппаКоманды = КомандаСкрипта.ПолучитьГруппы();

		Если ГруппаКоманды.Количество() <= 1 Тогда
			Продолжить;
		КонецЕсли;

		ИмяКоманды		= СокрЛП(ГруппаКоманды[0].Значение);
		СтрокаПараметров	= СокрЛП(ГруппаКоманды[1].Значение);
		
		Если Не ЗначениеЗаполнено(СтрокаПараметров) Тогда
			КомандыИПараметры.Вставить(ИмяКоманды, СтрокаПараметров);
			Продолжить;
		КонецЕсли;
		
		//@skip-check undefined-function
		ГруппыПараметорвКоманды = СтрНайтиВсеПоРегулярномуВыражению(СтрокаПараметров, ШаблонПоискаПараметров);

		ЗначениеПараметра = "";

		Если ГруппыПараметорвКоманды.Количество() = 0 Тогда
			ЗначениеПараметра = СокрЛП(СтрокаПараметров);
//		ИначеЕсли ГруппыПараметорвКоманды.Количество() = 1 Тогда
//			ЗначениеПараметра = ГруппыПараметорвКоманды[0].Значение;
		Иначе
			ЗначениеПараметра = ЗначенияГруппыПараметров(ГруппыПараметорвКоманды);
		КонецЕсли;

		КомандыИПараметры.Вставить(ИмяКоманды, ЗначениеПараметра);
		
	КонецЦикла;

	Возврат КомандыИПараметры;

КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияГруппыПараметров(ГруппыПараметорвКоманды)

	ПараметрИЗначение = Новый Соответствие;

	Для Каждого ПараметрКоманды Из ГруппыПараметорвКоманды Цикл
		
		ГруппаПараметровИЗначений = ПараметрКоманды.ПолучитьГруппы();
		Если ГруппаПараметровИЗначений.Количество() = 3 Тогда
			ЗначениеКоманды	= СокрЛП(ГруппаПараметровИЗначений[0].Значение);
			
			Если ЗначениеЗаполнено(ЗначениеКоманды) Тогда
				ПараметрИЗначение.Вставить("", ЗначениеКоманды);
			КонецЕсли;
			
			ИмяПараметра		= СокрЛП(ГруппаПараметровИЗначений[1].Значение);
			ЗначениеАргумента	= СокрЛП(ГруппаПараметровИЗначений[2].Значение);

			Если ЗначениеЗаполнено(ИмяПараметра) Тогда
				ПараметрИЗначение.Вставить(ИмяПараметра, ЗначениеАргумента);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	Возврат ПараметрИЗначение;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШаблоныРазбораСкриптаПоПрограммам()
	
	ШаблоныПоискаПоПрограммам = Новый Соответствие;
	// Шаблоны регулярных выражений
	// REF: Сделать на одном универсальном регулярном выражении

	// Для утилиты 1cv8
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"(DESIGNER|ENTERPRISE|CREATEINFOBASE|[\/][\w]+)([^\/]+)");
	СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(^""[^""]+"")|(-[a-zA-Z]+)([^-]*)");
	
	ШаблоныПоискаПоПрограммам.Вставить("1cv8", СтруктураШаблона);
	
	//Для утилиты ibcmd
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"(?<=\s|^)\w+(?=\s)()");
	СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(-\w+)?([^-]*|[+-])");
	
	ШаблоныПоискаПоПрограммам.Вставить("ibcmd", СтруктураШаблона);
	
	//Для утилиты ibsrv
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"([\/][\w]+)([^\/.]*|[+-])");
	СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(-\w+)?([^-]*|[+-])");
	
	ШаблоныПоискаПоПрограммам.Вставить("ibsrv", СтруктураШаблона);
	
	//Для утилиты rac
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"([\/][\w]+)([^\/.]*|[+-])");
	СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(-\w+)?([^-]*|[+-])");
	
	ШаблоныПоискаПоПрограммам.Вставить("rac", СтруктураШаблона);
	
	//Для утилиты ring
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"([\/][\w]+)([^\/.]*|[+-])");
	СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(-\w+)?([^-]*|[+-])");
	
	ШаблоныПоискаПоПрограммам.Вставить("ring", СтруктураШаблона);
	
	//Для утилиты для 1cedtcli
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"([\/][\w]+)([^\/.]*|[+-])");
	СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(-\w+)?([^-]*|[+-])");
	
	ШаблоныПоискаПоПрограммам.Вставить("1cedtcli", СтруктураШаблона);
	
	//Для утилиты для webinst
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("ШаблонПоискаКоманд",		"([\/][\w]+)([^\/.]*|[+-])");
	СтруктураШаблона.Вставить("ШаблонПоискаПараметров",	"(-\w+)?([^-]*|[+-])");
	
	ШаблоныПоискаПоПрограммам.Вставить("webinst", СтруктураШаблона);
	
	МассивИменПрограмм = Новый Массив;
	Для Каждого ШаблонСкрипта Из ШаблоныПоискаПоПрограммам Цикл
		МассивИменПрограмм.Добавить(ШаблонСкрипта.Ключ);
	КонецЦикла;
	
	ПодстрокаИменПрограмм	= СтрСоединить(МассивИменПрограмм, "|");
	
	ПараметрыШаблоновСкрипта = Новый Структура;
	ПараметрыШаблоновСкрипта.Вставить("ПодстрокаИменПрограмм",	ПодстрокаИменПрограмм);
	ПараметрыШаблоновСкрипта.Вставить("ШаблоныРазбораСкрипта",	ШаблоныПоискаПоПрограммам);
	
	Возврат ПараметрыШаблоновСкрипта;
	
КонецФункции

&НаСервере
Процедура ОпределитьКомандыНаСервере(СтрокаКомманд)
	
	ЭлементыДерева = ДеревоКоманд.ПолучитьЭлементы();	
	ОпределитьКомандыСкрипта(СтрокаКомманд, ЭлементыДерева);
		
КонецПроцедуры

&НаКлиенте
Функция ПараметрыКомандИзСтрокиСкрипта(СтрокаКомманд)
	
	МассивКоманд = СтрРазделить(СтрокаКомманд, " ", Ложь);
	
	ГраницаМассива = МассивКоманд.ВГраница();
	ИндексЭлемента = 0;	
	Пока ИндексЭлемента <= ГраницаМассива Цикл
		
		МассивПоказателя = СтрРазделить(МассивКоманд[ИндексЭлемента], "=");
		
		Если МассивПоказателя.Количество() > 1 Тогда
			МассивКоманд[ИндексЭлемента] = МассивПоказателя[0] + "=";
			МассивКоманд.Вставить(ИндексЭлемента + 1, МассивПоказателя[1]);
			ГраницаМассива = ГраницаМассива + 1;
		КонецЕсли;	
		
		ИндексЭлемента = ИндексЭлемента + 1;
		
	КонецЦикла;
	
	//Тест_ОпределитьКомандыСкрипта(МассивСтрокиКомманд, ДеревоКоманд, ПозицияКурсораПоиска, НаборЭлементовСкрипта);
	
	Возврат МассивКоманд;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РегулярныеВыраженияДоступны()
	
	// Проверка на версию платформы старше 8.3.23;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	СоставНомераВерсии = СтрРазделить(ВерсияПриложения, ".");
		
	Возврат Число(СоставНомераВерсии[0]) = 8
				И Число(СоставНомераВерсии[1]) = 3
				И Число(СоставНомераВерсии[2]) >= 23;
		
КонецФункции

&НаКлиенте
Процедура Тест_ОпределитьКомандыСкрипта(МассивСтрокиКомманд, ЭлементыДерева, ПозицияКурсораПоиска, НаборЭлементовСкрипта)

	СтрокиДерева = ЭлементыДерева.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из СтрокиДерева Цикл
		
		Если ЭлементДерева.Команда = МассивСтрокиКомманд[ПозицияКурсораПоиска] Тогда
		
			ЭлементДерева.Использование	= Истина;
			УстановитьОтметкуКоменды(ЭлементДерева, Истина);
			
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("КлючСвязи", ЭлементДерева.КлючСвязи);
			ДанныеСтроки.Вставить("Параметр", "");
			ДанныеСтроки.Вставить("ПредставлениеПустогоЗначения", "");
			//ЗаписатьВНаборЭлементовСкрипта(НаборЭлементовСкрипта, ПозицияНайденнойКоманды, ДанныеСтроки);
			
			Если ПозицияКурсораПоиска = МассивСтрокиКомманд.ВГранице() Тогда
				Прервать;
			Иначе
				ПозицияКурсораПоиска = Мин(ПозицияКурсораПоиска + 1, МассивСтрокиКомманд.ВГранице());	
			КонецЕсли;
			
		КонецЕсли;
		//ОпределитьПараметрыСкрипта(ЭлементДерева.КлючСвязи, СтрокаКомманд, ПозицияКурсораПоиска, НаборЭлементовСкрипта);
		//Тест_ОпределитьКомандыСкрипта(СтрокаКомманд, ЭлементДерева, ПозицияКурсораПоиска, НаборЭлементовСкрипта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАгрументыПараметров(СтрокаКомманд, НаборЭлементовСкрипта)
	
	Если НаборЭлементовСкрипта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаАргументов = Новый ТаблицаЗначений;
	ТаблицаАргументов.Колонки.Добавить("ПозицияНачала", ОписаниеТипаЧисло(3));
	ТаблицаАргументов.Колонки.Добавить("ПозицияКонца", ОписаниеТипаЧисло(3));
	ТаблицаАргументов.Колонки.Добавить("Параметр");
	ТаблицаАргументов.Колонки.Добавить("ПараметрБезАргумента");
	ТаблицаАргументов.Колонки.Добавить("КлючСвязи");
	ТаблицаАргументов.Колонки.Добавить("АргументКоманды");
	
	АргументыКоманд = Новый Соответствие;
	
	Для Каждого ЭлементНабора Из НаборЭлементовСкрипта Цикл
		
		Если ЗначениеЗаполнено(ЭлементНабора.АргументКоманды) Тогда
			АргументыКоманд.Вставить(ЭлементНабора.КлючСвязи, ЭлементНабора.Параметр);	
		КонецЕсли;
			
		СтрокаАргумента = ТаблицаАргументов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАргумента, ЭлементНабора);
	КонецЦикла;
	
	ТаблицаАргументов.Сортировать("ПозицияНачала");
	
	ПоследняяПозиция = СтрДлина(СтрокаКомманд);
	ЗначенияНачала = ТаблицаАргументов.ВыгрузитьКолонку("ПозицияНачала");
	
	ЗначенияНачала.Удалить(0);
	ЗначенияНачала.Добавить(ПоследняяПозиция);
	
	ТаблицаАргументов.ЗагрузитьКолонку(ЗначенияНачала, "ПозицияКонца");
	
	Для Каждого СтрокаТаблицыАргументов Из ТаблицаАргументов Цикл
		
		НачальнаяПозицияАргумента = СтрокаТаблицыАргументов.ПозицияНачала + СтрДлина(СтрокаТаблицыАргументов.ПараметрБезАргумента);
		ДлинаСтрокиАргумента = СтрокаТаблицыАргументов.ПозицияКонца - НачальнаяПозицияАргумента;
		
		СтрокаАргумента = СокрЛП(Сред(СтрокаКомманд, НачальнаяПозицияАргумента, ДлинаСтрокиАргумента));
		
		УстановитьАргументПараметра(СтрокаТаблицыАргументов.КлючСвязи,
											СтрокаТаблицыАргументов.Параметр,
											СтрокаАргумента);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАргументПараметра(КлючСвязи, Параметр, СтрокаАргумента)
	
	СтрокаАргумента = СокрЛП(СтрокаАргумента);
	
	СтрокаПарметра = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи, Параметр",
																КлючСвязи,
																Параметр));

	СтрокаАргумента = СтрЗаменить(СтрокаАргумента, """""", """");
	
	Если Лев(СтрокаАргумента, 1) = """" Тогда
		СтрокаАргумента = Прав(СтрокаАргумента, СтрДлина(СтрокаАргумента) - 1);	
	КонецЕсли;
	
	Если Прав(СтрокаАргумента, 1) = """" Тогда
		СтрокаАргумента = Лев(СтрокаАргумента, СтрДлина(СтрокаАргумента) - 1);	
	КонецЕсли;
	
	Если СтрокаПарметра.Количество() > 0 Тогда
		СтрокаПарметра[0].ЗначениеАргумента = СтрокаАргумента;
		СтрокаПарметра[0].Использование	= Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОпределитьКомандыСкрипта(СтрокаКомманд, ЭлементыДерева)

	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Команда <> "" Тогда
			
			//@skip-check undefined-function
			НайденноеВхождение = СтрНайтиПоРегулярномуВыражению(ЭлементДерева.Команда, "\/[\w]*");
			Если НайденноеВхождение.НачальнаяПозиция > 0 Тогда
				ЭлементДерева.Использование	= Истина;
			КонецЕсли;
			
		КонецЕсли;	
		
		ОпределитьПараметрыСкрипта(ЭлементДерева.КлючСвязи, СтрокаКомманд);
		ОпределитьКомандыСкрипта(СтрокаКомманд, ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПараметрыСкрипта(КлючСвязи, СтрокаКомманд)
	
	НайденныеСтрокиПараметров = ТаблицаПараметров.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	Для Каждого СтрокаПараметра Из НайденныеСтрокиПараметров Цикл
		
		//@skip-check undefined-function
		НайденноеВхождение = СтрНайтиПоРегулярномуВыражению(СтрокаПараметра.Параметр, "[\/-][\w]*");
		Если НайденноеВхождение.НачальнаяПозиция > 0 Тогда
			СтрокаРегулярногоВыражения = "(\" + НайденноеВхождение.Значение + ") (""[^""]+""|[\d\w]+)?";
			//@skip-check undefined-function
			ВхождениеПараметра = СтрНайтиПоРегулярномуВыражению(СтрокаКомманд, СтрокаРегулярногоВыражения);

			Если ВхождениеПараметра.НачальнаяПозиция > 0 Тогда
				СтрокаПараметра.Использование = Истина;
				ГруппыПараметраИЗначния = ВхождениеПараметра.ПолучитьГруппы();
				
				Если ГруппыПараметраИЗначния.Количество() > 1 Тогда
					СтрокаПараметра.ЗначениеАргумента = ГруппыПараметраИЗначния[1].Значение;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВНаборЭлементовСкрипта(НаборЭлементовСкрипта, ПозицияКурсораПоиска, ДанныеСтроки)
	
	СтруктураЭлемента = Новый Структура;
	СтруктураЭлемента.Вставить("ПозицияНачала", ПозицияКурсораПоиска);
	СтруктураЭлемента.Вставить("АргументКоманды");
	СтруктураЭлемента.Вставить("Параметр", ДанныеСтроки.Параметр);
	СтруктураЭлемента.Вставить("ПараметрБезАргумента");
	СтруктураЭлемента.Вставить("КлючСвязи", ДанныеСтроки.КлючСвязи);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ДанныеСтроки.Параметр = ДанныеСтроки.ПредставлениеПустогоЗначения Тогда
			СтруктураЭлемента.ПараметрБезАргумента = СокрЛП(ДанныеСтроки.Параметр);
		Иначе	
			СтруктураЭлемента.ПараметрБезАргумента = СокрЛП(СтрЗаменить(ДанныеСтроки.Параметр, "<" + ДанныеСтроки.ПредставлениеПустогоЗначения + ">", ""));
		КонецЕсли;
		
		Если СокрЛП(ДанныеСтроки.Параметр) = "<" + СокрЛП(ДанныеСтроки.ПредставлениеПустогоЗначения) + ">" Тогда
			СтруктураЭлемента.АргументКоманды = ДанныеСтроки.Параметр;
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЭлементовСкрипта.Добавить(СтруктураЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтрокуВИсторию()
	
	Если ИсторияСтрокиСкрипта.Количество() > 0 Тогда
		ПоследняяСтрокаИстории = ИсторияСтрокиСкрипта.Получить(ИсторияСтрокиСкрипта.Количество() - 1);
		Если ПоследняяСтрокаИстории <> ТекстСкриптаПредставление Тогда
			ИсторияСтрокиСкрипта.Вставить(0, ТекстСкриптаПредставление);
		КонецЕсли;
	Иначе
		ИсторияСтрокиСкрипта.Добавить(ТекстСкриптаПредставление);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти


